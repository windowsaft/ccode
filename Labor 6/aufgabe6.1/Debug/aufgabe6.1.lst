
aufgabe6.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000192c  08000000  0c000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  10000000  10000000  00010000  2**0
                  ALLOC
  2 .bss          00000010  20000000  0c00192c  00010000  2**2
                  ALLOC
  3 .no_init      00000014  2000ffc0  2000ffc0  0000ffc0  2**2
                  ALLOC
  4 .debug_aranges 000006c8  00000000  00000000  00009930  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000093bb  00000000  00000000  00009ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000165a  00000000  00000000  000133b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002cf9  00000000  00000000  00014a0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001b6c  00000000  00000000  00017708  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000442d  00000000  00000000  00019274  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000378c  00000000  00000000  0001d6a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000005e0  00000000  00000000  00020e2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .build_attributes 00000351  00000000  00000000  0002140d  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800004c:	b1 02 00 08 11 10 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
    Entry   GPDMA1_0_IRQHandler         /* Handler name for SR GPDMA1_0  */
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>
/* ================== START OF VECTOR ROUTINES ============================= */

	.align	1
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)
    .thumb
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c00192c 	.word	0x0c00192c
 800024c:	20000000 	.word	0x20000000
 8000250:	00000000 	.word	0x00000000
 8000254:	0c00192c 	.word	0x0c00192c
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c00192c 	.word	0x0c00192c
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c00192c 	.word	0x0c00192c
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	20000000 	.word	0x20000000
 800027c:	0000000c 	.word	0x0000000c
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
    Entry   GPDMA1_0_IRQHandler         /* Handler name for SR GPDMA1_0  */
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

 8000290:	10000800 	.word	0x10000800
/* ================== START OF VECTOR ROUTINES ============================= */

	.align	1
 8000294:	080002dd 	.word	0x080002dd
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 80002a8:	080018bd 	.word	0x080018bd
    blx  r0
#endif

    ldr  r0, =main
 80002ac:	08000f01 	.word	0x08000f01

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <delay>:

/*******************************************************************************
 * LOCAL FUNCTIONS
 *******************************************************************************/
static void delay(uint32_t cycles)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b085      	sub	sp, #20
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 80002bc:	2300      	movs	r3, #0
 80002be:	60fb      	str	r3, [r7, #12]
 80002c0:	e003      	b.n	80002ca <delay+0x16>
  {
    __NOP();
 80002c2:	bf00      	nop
 *******************************************************************************/
static void delay(uint32_t cycles)
{
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	3301      	adds	r3, #1
 80002c8:	60fb      	str	r3, [r7, #12]
 80002ca:	68fa      	ldr	r2, [r7, #12]
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	429a      	cmp	r2, r3
 80002d0:	d3f7      	bcc.n	80002c2 <delay+0xe>
  {
    __NOP();
  }
}
 80002d2:	3714      	adds	r7, #20
 80002d4:	46bd      	mov	sp, r7
 80002d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002da:	4770      	bx	lr

080002dc <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 80002dc:	b598      	push	{r3, r4, r7, lr}
 80002de:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002e0:	4a05      	ldr	r2, [pc, #20]	; (80002f8 <SystemInit+0x1c>)
 80002e2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002e6:	4614      	mov	r4, r2
 80002e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 80002ee:	f000 fd7b 	bl	8000de8 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80002f2:	f000 f803 	bl	80002fc <SystemCoreClockSetup>
}
 80002f6:	bd98      	pop	{r3, r4, r7, pc}
 80002f8:	2000ffc4 	.word	0x2000ffc4

080002fc <SystemCoreClockSetup>:
  temp |= PMU_FLASH_WS;
  FLASH0->FCON = temp;
}

__WEAK void SystemCoreClockSetup(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
#else
  /* Automatic calibration uses the fSTDBY */

  /* Enable HIB domain */
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8000300:	4b77      	ldr	r3, [pc, #476]	; (80004e0 <SystemCoreClockSetup+0x1e4>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	f003 0301 	and.w	r3, r3, #1
 8000308:	2b00      	cmp	r3, #0
 800030a:	d10c      	bne.n	8000326 <SystemCoreClockSetup+0x2a>
  {
    SCU_POWER->PWRSET |= SCU_POWER_PWRSET_HIB_Msk;
 800030c:	4a74      	ldr	r2, [pc, #464]	; (80004e0 <SystemCoreClockSetup+0x1e4>)
 800030e:	4b74      	ldr	r3, [pc, #464]	; (80004e0 <SystemCoreClockSetup+0x1e4>)
 8000310:	685b      	ldr	r3, [r3, #4]
 8000312:	f043 0301 	orr.w	r3, r3, #1
 8000316:	6053      	str	r3, [r2, #4]

    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8000318:	bf00      	nop
 800031a:	4b71      	ldr	r3, [pc, #452]	; (80004e0 <SystemCoreClockSetup+0x1e4>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	f003 0301 	and.w	r3, r3, #1
 8000322:	2b00      	cmp	r3, #0
 8000324:	d0f9      	beq.n	800031a <SystemCoreClockSetup+0x1e>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8000326:	4b6f      	ldr	r3, [pc, #444]	; (80004e4 <SystemCoreClockSetup+0x1e8>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800032e:	2b00      	cmp	r3, #0
 8000330:	d009      	beq.n	8000346 <SystemCoreClockSetup+0x4a>
  {
    SCU_RESET->RSTCLR |= SCU_RESET_RSTCLR_HIBRS_Msk;
 8000332:	4a6c      	ldr	r2, [pc, #432]	; (80004e4 <SystemCoreClockSetup+0x1e8>)
 8000334:	4b6b      	ldr	r3, [pc, #428]	; (80004e4 <SystemCoreClockSetup+0x1e8>)
 8000336:	689b      	ldr	r3, [r3, #8]
 8000338:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800033c:	6093      	str	r3, [r2, #8]
    delay(DELAY_CNT_150US_50MHZ);
 800033e:	f641 504c 	movw	r0, #7500	; 0x1d4c
 8000342:	f7ff ffb7 	bl	80002b4 <delay>
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_RCS_Msk | SCU_HIBERNATE_HDCR_STDBYSEL_Msk;

#endif /* STDBY_CLOCK_SRC == STDBY_CLOCK_SRC_OSCULP */

  /* Enable automatic calibration of internal fast oscillator */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_AOTREN_Msk;
 8000346:	4a68      	ldr	r2, [pc, #416]	; (80004e8 <SystemCoreClockSetup+0x1ec>)
 8000348:	4b67      	ldr	r3, [pc, #412]	; (80004e8 <SystemCoreClockSetup+0x1ec>)
 800034a:	685b      	ldr	r3, [r3, #4]
 800034c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000350:	6053      	str	r3, [r2, #4]
#endif /* FOFI_CALIBRATION_MODE == FOFI_CALIBRATION_MODE_AUTOMATIC */

  delay(DELAY_CNT_50US_50MHZ);
 8000352:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000356:	f7ff ffad 	bl	80002b4 <delay>

#if ENABLE_PLL

  /* enable PLL */
  SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 800035a:	4a63      	ldr	r2, [pc, #396]	; (80004e8 <SystemCoreClockSetup+0x1ec>)
 800035c:	4b62      	ldr	r3, [pc, #392]	; (80004e8 <SystemCoreClockSetup+0x1ec>)
 800035e:	685b      	ldr	r3, [r3, #4]
 8000360:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000364:	f023 0302 	bic.w	r3, r3, #2
 8000368:	6053      	str	r3, [r2, #4]

#if PLL_CLOCK_SRC != PLL_CLOCK_SRC_OFI
  /* enable OSC_HP */
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 800036a:	4b60      	ldr	r3, [pc, #384]	; (80004ec <SystemCoreClockSetup+0x1f0>)
 800036c:	685b      	ldr	r3, [r3, #4]
 800036e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000372:	2b00      	cmp	r3, #0
 8000374:	d026      	beq.n	80003c4 <SystemCoreClockSetup+0xc8>
  {
    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 8000376:	4a5d      	ldr	r2, [pc, #372]	; (80004ec <SystemCoreClockSetup+0x1f0>)
 8000378:	4b5c      	ldr	r3, [pc, #368]	; (80004ec <SystemCoreClockSetup+0x1f0>)
 800037a:	685b      	ldr	r3, [r3, #4]
 800037c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000380:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000384:	6053      	str	r3, [r2, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 8000386:	f000 f92b 	bl	80005e0 <OSCHP_GetFrequency>
 800038a:	4602      	mov	r2, r0
 800038c:	4b58      	ldr	r3, [pc, #352]	; (80004f0 <SystemCoreClockSetup+0x1f4>)
 800038e:	fba3 2302 	umull	r2, r3, r3, r2
 8000392:	0d1b      	lsrs	r3, r3, #20
 8000394:	3b01      	subs	r3, #1
 8000396:	041b      	lsls	r3, r3, #16
 8000398:	4954      	ldr	r1, [pc, #336]	; (80004ec <SystemCoreClockSetup+0x1f0>)
 800039a:	4a54      	ldr	r2, [pc, #336]	; (80004ec <SystemCoreClockSetup+0x1f0>)
 800039c:	6852      	ldr	r2, [r2, #4]
 800039e:	4313      	orrs	r3, r2
 80003a0:	604b      	str	r3, [r1, #4]

    /* select OSC_HP clock as PLL input */
    SCU_PLL->PLLCON2 = 0;
 80003a2:	4b51      	ldr	r3, [pc, #324]	; (80004e8 <SystemCoreClockSetup+0x1ec>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	60da      	str	r2, [r3, #12]

    /* restart OSC Watchdog */
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 80003a8:	4a4f      	ldr	r2, [pc, #316]	; (80004e8 <SystemCoreClockSetup+0x1ec>)
 80003aa:	4b4f      	ldr	r3, [pc, #316]	; (80004e8 <SystemCoreClockSetup+0x1ec>)
 80003ac:	685b      	ldr	r3, [r3, #4]
 80003ae:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80003b2:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 80003b4:	bf00      	nop
 80003b6:	4b4c      	ldr	r3, [pc, #304]	; (80004e8 <SystemCoreClockSetup+0x1ec>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	f403 7360 	and.w	r3, r3, #896	; 0x380
 80003be:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 80003c2:	d1f8      	bne.n	80003b6 <SystemCoreClockSetup+0xba>
  /* select backup clock as PLL input */
  SCU_PLL->PLLCON2 = SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk;
#endif

  /* Go to bypass the Main PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_VCOBYP_Msk;
 80003c4:	4a48      	ldr	r2, [pc, #288]	; (80004e8 <SystemCoreClockSetup+0x1ec>)
 80003c6:	4b48      	ldr	r3, [pc, #288]	; (80004e8 <SystemCoreClockSetup+0x1ec>)
 80003c8:	685b      	ldr	r3, [r3, #4]
 80003ca:	f043 0301 	orr.w	r3, r3, #1
 80003ce:	6053      	str	r3, [r2, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 80003d0:	bf00      	nop
 80003d2:	4b45      	ldr	r3, [pc, #276]	; (80004e8 <SystemCoreClockSetup+0x1ec>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	f003 0301 	and.w	r3, r3, #1
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d0f9      	beq.n	80003d2 <SystemCoreClockSetup+0xd6>
  {
    /* wait for prescaler mode */
  }

  /* disconnect Oscillator from PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FINDIS_Msk;
 80003de:	4a42      	ldr	r2, [pc, #264]	; (80004e8 <SystemCoreClockSetup+0x1ec>)
 80003e0:	4b41      	ldr	r3, [pc, #260]	; (80004e8 <SystemCoreClockSetup+0x1ec>)
 80003e2:	685b      	ldr	r3, [r3, #4]
 80003e4:	f043 0310 	orr.w	r3, r3, #16
 80003e8:	6053      	str	r3, [r2, #4]

  /* Setup divider settings for main PLL */
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80003ea:	4b3f      	ldr	r3, [pc, #252]	; (80004e8 <SystemCoreClockSetup+0x1ec>)
 80003ec:	4a41      	ldr	r2, [pc, #260]	; (80004f4 <SystemCoreClockSetup+0x1f8>)
 80003ee:	609a      	str	r2, [r3, #8]
                      (PLL_K2DIV_0 << SCU_PLL_PLLCON1_K2DIV_Pos) |
                      (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 80003f0:	4a3d      	ldr	r2, [pc, #244]	; (80004e8 <SystemCoreClockSetup+0x1ec>)
 80003f2:	4b3d      	ldr	r3, [pc, #244]	; (80004e8 <SystemCoreClockSetup+0x1ec>)
 80003f4:	685b      	ldr	r3, [r3, #4]
 80003f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003fa:	6053      	str	r3, [r2, #4]

  /* connect Oscillator to PLL */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_FINDIS_Msk;
 80003fc:	4a3a      	ldr	r2, [pc, #232]	; (80004e8 <SystemCoreClockSetup+0x1ec>)
 80003fe:	4b3a      	ldr	r3, [pc, #232]	; (80004e8 <SystemCoreClockSetup+0x1ec>)
 8000400:	685b      	ldr	r3, [r3, #4]
 8000402:	f023 0310 	bic.w	r3, r3, #16
 8000406:	6053      	str	r3, [r2, #4]

  /* restart PLL Lock detection */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_RESLD_Msk;
 8000408:	4a37      	ldr	r2, [pc, #220]	; (80004e8 <SystemCoreClockSetup+0x1ec>)
 800040a:	4b37      	ldr	r3, [pc, #220]	; (80004e8 <SystemCoreClockSetup+0x1ec>)
 800040c:	685b      	ldr	r3, [r3, #4]
 800040e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000412:	6053      	str	r3, [r2, #4]

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000414:	bf00      	nop
 8000416:	4b34      	ldr	r3, [pc, #208]	; (80004e8 <SystemCoreClockSetup+0x1ec>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	f003 0304 	and.w	r3, r3, #4
 800041e:	2b00      	cmp	r3, #0
 8000420:	d0f9      	beq.n	8000416 <SystemCoreClockSetup+0x11a>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000422:	4a31      	ldr	r2, [pc, #196]	; (80004e8 <SystemCoreClockSetup+0x1ec>)
 8000424:	4b30      	ldr	r3, [pc, #192]	; (80004e8 <SystemCoreClockSetup+0x1ec>)
 8000426:	685b      	ldr	r3, [r3, #4]
 8000428:	f023 0301 	bic.w	r3, r3, #1
 800042c:	6053      	str	r3, [r2, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 800042e:	bf00      	nop
 8000430:	4b2d      	ldr	r3, [pc, #180]	; (80004e8 <SystemCoreClockSetup+0x1ec>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	f003 0301 	and.w	r3, r3, #1
 8000438:	2b00      	cmp	r3, #0
 800043a:	d1f9      	bne.n	8000430 <SystemCoreClockSetup+0x134>
  }
#endif /* ENABLE_PLL */

#if (SYS_CLOCK_SRC == SYS_CLOCK_SRC_PLL)
  /* Switch system clock to PLL */
  SCU_CLK->SYSCLKCR |= SCU_CLK_SYSCLKCR_SYSSEL_Msk;
 800043c:	4a2e      	ldr	r2, [pc, #184]	; (80004f8 <SystemCoreClockSetup+0x1fc>)
 800043e:	4b2e      	ldr	r3, [pc, #184]	; (80004f8 <SystemCoreClockSetup+0x1fc>)
 8000440:	68db      	ldr	r3, [r3, #12]
 8000442:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000446:	60d3      	str	r3, [r2, #12]
  /* Switch system clock to backup clock */
  SCU_CLK->SYSCLKCR &= ~SCU_CLK_SYSCLKCR_SYSSEL_Msk;
#endif

  /* Before scaling to final frequency we need to setup the clock dividers */
  SCU_CLK->PBCLKCR = PBCLKDIV;
 8000448:	4b2b      	ldr	r3, [pc, #172]	; (80004f8 <SystemCoreClockSetup+0x1fc>)
 800044a:	2200      	movs	r2, #0
 800044c:	615a      	str	r2, [r3, #20]
  SCU_CLK->CPUCLKCR = CPUCLKDIV;
 800044e:	4b2a      	ldr	r3, [pc, #168]	; (80004f8 <SystemCoreClockSetup+0x1fc>)
 8000450:	2200      	movs	r2, #0
 8000452:	611a      	str	r2, [r3, #16]
  SCU_CLK->CCUCLKCR = CCUCLKDIV;
 8000454:	4b28      	ldr	r3, [pc, #160]	; (80004f8 <SystemCoreClockSetup+0x1fc>)
 8000456:	2200      	movs	r2, #0
 8000458:	621a      	str	r2, [r3, #32]
  SCU_CLK->WDTCLKCR = WDTCLKDIV;
 800045a:	4b27      	ldr	r3, [pc, #156]	; (80004f8 <SystemCoreClockSetup+0x1fc>)
 800045c:	2200      	movs	r2, #0
 800045e:	625a      	str	r2, [r3, #36]	; 0x24
  SCU_CLK->EBUCLKCR = EBUCLKDIV;
 8000460:	4b25      	ldr	r3, [pc, #148]	; (80004f8 <SystemCoreClockSetup+0x1fc>)
 8000462:	2200      	movs	r2, #0
 8000464:	61da      	str	r2, [r3, #28]
  SCU_CLK->USBCLKCR = USBCLKDIV;
 8000466:	4b24      	ldr	r3, [pc, #144]	; (80004f8 <SystemCoreClockSetup+0x1fc>)
 8000468:	2203      	movs	r2, #3
 800046a:	619a      	str	r2, [r3, #24]

#if ENABLE_PLL
  /* PLL frequency stepping...*/
  /* Reset OSCDISCDIS */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 800046c:	4a1e      	ldr	r2, [pc, #120]	; (80004e8 <SystemCoreClockSetup+0x1ec>)
 800046e:	4b1e      	ldr	r3, [pc, #120]	; (80004e8 <SystemCoreClockSetup+0x1ec>)
 8000470:	685b      	ldr	r3, [r3, #4]
 8000472:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000476:	6053      	str	r3, [r2, #4]

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000478:	4b1b      	ldr	r3, [pc, #108]	; (80004e8 <SystemCoreClockSetup+0x1ec>)
 800047a:	4a20      	ldr	r2, [pc, #128]	; (80004fc <SystemCoreClockSetup+0x200>)
 800047c:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_1 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K2RDY_Msk) == 0U)
 800047e:	bf00      	nop
 8000480:	4b19      	ldr	r3, [pc, #100]	; (80004e8 <SystemCoreClockSetup+0x1ec>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	f003 0320 	and.w	r3, r3, #32
 8000488:	2b00      	cmp	r3, #0
 800048a:	d0f9      	beq.n	8000480 <SystemCoreClockSetup+0x184>
  {
    /* wait until K2-divider operates on the configured value  */
  }

  delay(DELAY_CNT_50US_60MHZ);
 800048c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000490:	f7ff ff10 	bl	80002b4 <delay>

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000494:	4b14      	ldr	r3, [pc, #80]	; (80004e8 <SystemCoreClockSetup+0x1ec>)
 8000496:	4a1a      	ldr	r2, [pc, #104]	; (8000500 <SystemCoreClockSetup+0x204>)
 8000498:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_2 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K2RDY_Msk) == 0U)
 800049a:	bf00      	nop
 800049c:	4b12      	ldr	r3, [pc, #72]	; (80004e8 <SystemCoreClockSetup+0x1ec>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	f003 0320 	and.w	r3, r3, #32
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d0f9      	beq.n	800049c <SystemCoreClockSetup+0x1a0>
  {
    /* wait until K2-divider operates on the configured value  */
  }

  delay(DELAY_CNT_50US_90MHZ);
 80004a8:	f241 1094 	movw	r0, #4500	; 0x1194
 80004ac:	f7ff ff02 	bl	80002b4 <delay>

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80004b0:	4b0d      	ldr	r3, [pc, #52]	; (80004e8 <SystemCoreClockSetup+0x1ec>)
 80004b2:	4a14      	ldr	r2, [pc, #80]	; (8000504 <SystemCoreClockSetup+0x208>)
 80004b4:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K2RDY_Msk) == 0U)
 80004b6:	bf00      	nop
 80004b8:	4b0b      	ldr	r3, [pc, #44]	; (80004e8 <SystemCoreClockSetup+0x1ec>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	f003 0320 	and.w	r3, r3, #32
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d0f9      	beq.n	80004b8 <SystemCoreClockSetup+0x1bc>
  {
    /* wait until K2-divider operates on the configured value  */
  }

  delay(DELAY_CNT_50US_120MHZ);
 80004c4:	f241 7070 	movw	r0, #6000	; 0x1770
 80004c8:	f7ff fef4 	bl	80002b4 <delay>

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 80004cc:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <SystemCoreClockSetup+0x20c>)
 80004ce:	2205      	movs	r2, #5
 80004d0:	60da      	str	r2, [r3, #12]

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_UVCOLCKT_Msk;
#endif /* (USBCLKDIV & SCU_CLK_USBCLKCR_USBSEL_Msk) */

  /* Enable selected clocks */
  SCU_CLK->CLKSET = ENABLE_SCUCLK;
 80004d2:	4b09      	ldr	r3, [pc, #36]	; (80004f8 <SystemCoreClockSetup+0x1fc>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	605a      	str	r2, [r3, #4]
  PORT0->IOCR8 = (PORT0->IOCR8 & ~PORT0_IOCR8_PC8_Msk) | (0x11U << PORT0_IOCR8_PC8_Pos);
#endif

#endif  /* ENABLE_EXTCLK == 1  */

  SystemCoreClockUpdate();
 80004d8:	f000 f818 	bl	800050c <SystemCoreClockUpdate>
}
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	50004200 	.word	0x50004200
 80004e4:	50004400 	.word	0x50004400
 80004e8:	50004710 	.word	0x50004710
 80004ec:	50004700 	.word	0x50004700
 80004f0:	6b5fca6b 	.word	0x6b5fca6b
 80004f4:	01134f00 	.word	0x01134f00
 80004f8:	50004600 	.word	0x50004600
 80004fc:	01074f00 	.word	0x01074f00
 8000500:	01044f00 	.word	0x01044f00
 8000504:	01034f00 	.word	0x01034f00
 8000508:	50004160 	.word	0x50004160

0800050c <SystemCoreClockUpdate>:

__WEAK void SystemCoreClockUpdate(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 8000512:	4b2f      	ldr	r3, [pc, #188]	; (80005d0 <SystemCoreClockUpdate+0xc4>)
 8000514:	68db      	ldr	r3, [r3, #12]
 8000516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800051a:	2b00      	cmp	r3, #0
 800051c:	d03e      	beq.n	800059c <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 800051e:	4b2d      	ldr	r3, [pc, #180]	; (80005d4 <SystemCoreClockUpdate+0xc8>)
 8000520:	68db      	ldr	r3, [r3, #12]
 8000522:	f003 0301 	and.w	r3, r3, #1
 8000526:	2b00      	cmp	r3, #0
 8000528:	d002      	beq.n	8000530 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 800052a:	4b2b      	ldr	r3, [pc, #172]	; (80005d8 <SystemCoreClockUpdate+0xcc>)
 800052c:	60fb      	str	r3, [r7, #12]
 800052e:	e002      	b.n	8000536 <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 8000530:	f000 f856 	bl	80005e0 <OSCHP_GetFrequency>
 8000534:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 8000536:	4b27      	ldr	r3, [pc, #156]	; (80005d4 <SystemCoreClockUpdate+0xc8>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	f003 0304 	and.w	r3, r3, #4
 800053e:	2b00      	cmp	r3, #0
 8000540:	d020      	beq.n	8000584 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 8000542:	4b24      	ldr	r3, [pc, #144]	; (80005d4 <SystemCoreClockUpdate+0xc8>)
 8000544:	689b      	ldr	r3, [r3, #8]
 8000546:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800054a:	0e1b      	lsrs	r3, r3, #24
 800054c:	3301      	adds	r3, #1
 800054e:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000550:	4b20      	ldr	r3, [pc, #128]	; (80005d4 <SystemCoreClockUpdate+0xc8>)
 8000552:	689b      	ldr	r3, [r3, #8]
 8000554:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000558:	0a1b      	lsrs	r3, r3, #8
 800055a:	3301      	adds	r3, #1
 800055c:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 800055e:	4b1d      	ldr	r3, [pc, #116]	; (80005d4 <SystemCoreClockUpdate+0xc8>)
 8000560:	689b      	ldr	r3, [r3, #8]
 8000562:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000566:	0c1b      	lsrs	r3, r3, #16
 8000568:	3301      	adds	r3, #1
 800056a:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 800056c:	68bb      	ldr	r3, [r7, #8]
 800056e:	683a      	ldr	r2, [r7, #0]
 8000570:	fb02 f303 	mul.w	r3, r2, r3
 8000574:	68fa      	ldr	r2, [r7, #12]
 8000576:	fbb2 f3f3 	udiv	r3, r2, r3
 800057a:	687a      	ldr	r2, [r7, #4]
 800057c:	fb02 f303 	mul.w	r3, r2, r3
 8000580:	60fb      	str	r3, [r7, #12]
 8000582:	e00d      	b.n	80005a0 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8000584:	4b13      	ldr	r3, [pc, #76]	; (80005d4 <SystemCoreClockUpdate+0xc8>)
 8000586:	689b      	ldr	r3, [r3, #8]
 8000588:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800058c:	3301      	adds	r3, #1
 800058e:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 8000590:	68fa      	ldr	r2, [r7, #12]
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	fbb2 f3f3 	udiv	r3, r2, r3
 8000598:	60fb      	str	r3, [r7, #12]
 800059a:	e001      	b.n	80005a0 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 800059c:	4b0e      	ldr	r3, [pc, #56]	; (80005d8 <SystemCoreClockUpdate+0xcc>)
 800059e:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 80005a0:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <SystemCoreClockUpdate+0xc4>)
 80005a2:	68db      	ldr	r3, [r3, #12]
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	3301      	adds	r3, #1
 80005a8:	68fa      	ldr	r2, [r7, #12]
 80005aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80005ae:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 80005b0:	4b07      	ldr	r3, [pc, #28]	; (80005d0 <SystemCoreClockUpdate+0xc4>)
 80005b2:	691b      	ldr	r3, [r3, #16]
 80005b4:	f003 0301 	and.w	r3, r3, #1
 80005b8:	3301      	adds	r3, #1
 80005ba:	68fa      	ldr	r2, [r7, #12]
 80005bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80005c0:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 80005c2:	4a06      	ldr	r2, [pc, #24]	; (80005dc <SystemCoreClockUpdate+0xd0>)
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	6013      	str	r3, [r2, #0]
}
 80005c8:	3710      	adds	r7, #16
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	50004600 	.word	0x50004600
 80005d4:	50004710 	.word	0x50004710
 80005d8:	016e3600 	.word	0x016e3600
 80005dc:	2000ffc0 	.word	0x2000ffc0

080005e0 <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
 80005e4:	4b02      	ldr	r3, [pc, #8]	; (80005f0 <OSCHP_GetFrequency+0x10>)
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr
 80005f0:	00b71b00 	.word	0x00b71b00

080005f4 <XMC_ERU_Enable>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* Enable the clock and De-assert the ERU module from the reset state. */
void XMC_ERU_Enable(XMC_ERU_t *const eru)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
#if defined(XMC_ERU1)
  if (eru == XMC_ERU1)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	4a05      	ldr	r2, [pc, #20]	; (8000614 <XMC_ERU_Enable+0x20>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d103      	bne.n	800060c <XMC_ERU_Enable+0x18>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_ERU1);
#endif
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_ERU1);
 8000604:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000608:	f000 f8ac 	bl	8000764 <XMC_SCU_RESET_DeassertPeripheralReset>
  }
#else
  XMC_UNUSED_ARG(eru);
#endif
}
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40044000 	.word	0x40044000

08000618 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
 800061e:	60f8      	str	r0, [r7, #12]
 8000620:	460b      	mov	r3, r1
 8000622:	607a      	str	r2, [r7, #4]
 8000624:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));

  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 8000626:	7afb      	ldrb	r3, [r7, #11]
 8000628:	089b      	lsrs	r3, r3, #2
 800062a:	b2db      	uxtb	r3, r3
 800062c:	4618      	mov	r0, r3
 800062e:	7afb      	ldrb	r3, [r7, #11]
 8000630:	089b      	lsrs	r3, r3, #2
 8000632:	b2db      	uxtb	r3, r3
 8000634:	461a      	mov	r2, r3
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	3204      	adds	r2, #4
 800063a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800063e:	7afb      	ldrb	r3, [r7, #11]
 8000640:	f003 0303 	and.w	r3, r3, #3
 8000644:	00db      	lsls	r3, r3, #3
 8000646:	4619      	mov	r1, r3
 8000648:	23f8      	movs	r3, #248	; 0xf8
 800064a:	408b      	lsls	r3, r1
 800064c:	43db      	mvns	r3, r3
 800064e:	ea02 0103 	and.w	r1, r2, r3
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	1d02      	adds	r2, r0, #4
 8000656:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800065e:	7afb      	ldrb	r3, [r7, #11]
 8000660:	005b      	lsls	r3, r3, #1
 8000662:	4619      	mov	r1, r3
 8000664:	2303      	movs	r3, #3
 8000666:	408b      	lsls	r3, r1
 8000668:	43db      	mvns	r3, r3
 800066a:	401a      	ands	r2, r3
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	4a3a      	ldr	r2, [pc, #232]	; (800075c <XMC_GPIO_Init+0x144>)
 8000674:	4293      	cmp	r3, r2
 8000676:	d003      	beq.n	8000680 <XMC_GPIO_Init+0x68>
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	4a39      	ldr	r2, [pc, #228]	; (8000760 <XMC_GPIO_Init+0x148>)
 800067c:	4293      	cmp	r3, r2
 800067e:	d10a      	bne.n	8000696 <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000684:	7afb      	ldrb	r3, [r7, #11]
 8000686:	2101      	movs	r1, #1
 8000688:	fa01 f303 	lsl.w	r3, r1, r3
 800068c:	43db      	mvns	r3, r3
 800068e:	401a      	ands	r2, r3
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	661a      	str	r2, [r3, #96]	; 0x60
 8000694:	e042      	b.n	800071c <XMC_GPIO_Init+0x104>
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	b2db      	uxtb	r3, r3
 800069c:	b25b      	sxtb	r3, r3
 800069e:	2b00      	cmp	r3, #0
 80006a0:	da3c      	bge.n	800071c <XMC_GPIO_Init+0x104>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	685a      	ldr	r2, [r3, #4]
 80006a6:	7afb      	ldrb	r3, [r7, #11]
 80006a8:	409a      	lsls	r2, r3
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	605a      	str	r2, [r3, #4]

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 80006ae:	7afb      	ldrb	r3, [r7, #11]
 80006b0:	08db      	lsrs	r3, r3, #3
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	4618      	mov	r0, r3
 80006b6:	7afb      	ldrb	r3, [r7, #11]
 80006b8:	08db      	lsrs	r3, r3, #3
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	461a      	mov	r2, r3
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	3210      	adds	r2, #16
 80006c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80006c6:	7afb      	ldrb	r3, [r7, #11]
 80006c8:	f003 0307 	and.w	r3, r3, #7
 80006cc:	009b      	lsls	r3, r3, #2
 80006ce:	4619      	mov	r1, r3
 80006d0:	2307      	movs	r3, #7
 80006d2:	408b      	lsls	r3, r1
 80006d4:	43db      	mvns	r3, r3
 80006d6:	ea02 0103 	and.w	r1, r2, r3
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	f100 0210 	add.w	r2, r0, #16
 80006e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 80006e4:	7afb      	ldrb	r3, [r7, #11]
 80006e6:	08db      	lsrs	r3, r3, #3
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	4618      	mov	r0, r3
 80006ec:	7afb      	ldrb	r3, [r7, #11]
 80006ee:	08db      	lsrs	r3, r3, #3
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	461a      	mov	r2, r3
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	3210      	adds	r2, #16
 80006f8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	7a1b      	ldrb	r3, [r3, #8]
 8000700:	4619      	mov	r1, r3
 8000702:	7afb      	ldrb	r3, [r7, #11]
 8000704:	f003 0307 	and.w	r3, r3, #7
 8000708:	009b      	lsls	r3, r3, #2
 800070a:	fa01 f303 	lsl.w	r3, r1, r3
 800070e:	ea42 0103 	orr.w	r1, r2, r3
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	f100 0210 	add.w	r2, r0, #16
 8000718:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 800071c:	7afb      	ldrb	r3, [r7, #11]
 800071e:	089b      	lsrs	r3, r3, #2
 8000720:	b2db      	uxtb	r3, r3
 8000722:	4618      	mov	r0, r3
 8000724:	7afb      	ldrb	r3, [r7, #11]
 8000726:	089b      	lsrs	r3, r3, #2
 8000728:	b2db      	uxtb	r3, r3
 800072a:	461a      	mov	r2, r3
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	3204      	adds	r2, #4
 8000730:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	4619      	mov	r1, r3
 800073a:	7afb      	ldrb	r3, [r7, #11]
 800073c:	f003 0303 	and.w	r3, r3, #3
 8000740:	00db      	lsls	r3, r3, #3
 8000742:	fa01 f303 	lsl.w	r3, r1, r3
 8000746:	ea42 0103 	orr.w	r1, r2, r3
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	1d02      	adds	r2, r0, #4
 800074e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000752:	3714      	adds	r7, #20
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr
 800075c:	48028e00 	.word	0x48028e00
 8000760:	48028f00 	.word	0x48028f00

08000764 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(volatile uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8000764:	b480      	push	{r7}
 8000766:	b085      	sub	sp, #20
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	0f1b      	lsrs	r3, r3, #28
 8000770:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000778:	60bb      	str	r3, [r7, #8]

  *(volatile uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 800077a:	68fa      	ldr	r2, [r7, #12]
 800077c:	4613      	mov	r3, r2
 800077e:	005b      	lsls	r3, r3, #1
 8000780:	4413      	add	r3, r2
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	461a      	mov	r2, r3
 8000786:	4b04      	ldr	r3, [pc, #16]	; (8000798 <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 8000788:	4413      	add	r3, r2
 800078a:	68ba      	ldr	r2, [r7, #8]
 800078c:	601a      	str	r2, [r3, #0]
}
 800078e:	3714      	adds	r7, #20
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	50004414 	.word	0x50004414

0800079c <XMC_ERU_ETL_Init>:
 ********************************************************************************************************************/
/* Initializes the selected ERU_ETLx channel with the config structure.  */
void XMC_ERU_ETL_Init(XMC_ERU_t *const eru,
                      const uint8_t channel,
                      const XMC_ERU_ETL_CONFIG_t *const config)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	60f8      	str	r0, [r7, #12]
 80007a4:	460b      	mov	r3, r1
 80007a6:	607a      	str	r2, [r7, #4]
 80007a8:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);
 80007aa:	68f8      	ldr	r0, [r7, #12]
 80007ac:	f7ff ff22 	bl	80005f4 <XMC_ERU_Enable>

  eru->EXISEL = (eru->EXISEL &
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	681a      	ldr	r2, [r3, #0]
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
 80007b4:	7afb      	ldrb	r3, [r7, #11]
 80007b6:	009b      	lsls	r3, r3, #2
 80007b8:	4619      	mov	r1, r3
 80007ba:	230f      	movs	r3, #15
 80007bc:	408b      	lsls	r3, r1
 80007be:	43db      	mvns	r3, r3
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL &
 80007c0:	401a      	ands	r2, r3
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
                (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	7af9      	ldrb	r1, [r7, #11]
 80007c8:	0089      	lsls	r1, r1, #2
 80007ca:	408b      	lsls	r3, r1
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL &
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
 80007cc:	431a      	orrs	r2, r3
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL &
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	601a      	str	r2, [r3, #0]
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
                (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));

  eru->EXICON[channel] = config->raw;
 80007d2:	7afa      	ldrb	r2, [r7, #11]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	6859      	ldr	r1, [r3, #4]
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	3204      	adds	r2, #4
 80007dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80007e0:	3710      	adds	r7, #16
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop

080007e8 <XMC_ERU_OGU_SetServiceRequestMode>:

/* Configures the gating scheme for service request generation by setting (GP) bit. */
void XMC_ERU_OGU_SetServiceRequestMode(XMC_ERU_t *const eru,
                                       const uint8_t channel,
                                       const XMC_ERU_OGU_SERVICE_REQUEST_t mode)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	460b      	mov	r3, r1
 80007f2:	70fb      	strb	r3, [r7, #3]
 80007f4:	4613      	mov	r3, r2
 80007f6:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Channel Number", (channel < 4U));
  XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Service Request Mode", XMC_ERU_OGU_CHECK_SERIVCE_REQUEST(mode));

  eru->EXOCON_b[channel].GP = (uint8_t)mode;
 80007f8:	78fa      	ldrb	r2, [r7, #3]
 80007fa:	78bb      	ldrb	r3, [r7, #2]
 80007fc:	f003 0303 	and.w	r3, r3, #3
 8000800:	b2d9      	uxtb	r1, r3
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	3208      	adds	r2, #8
 8000806:	f001 0103 	and.w	r1, r1, #3
 800080a:	0109      	lsls	r1, r1, #4
 800080c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000810:	f020 0030 	bic.w	r0, r0, #48	; 0x30
 8000814:	4301      	orrs	r1, r0
 8000816:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr

08000824 <_init>:
  }
}

/* Init */
void _init(void)
{}
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr

08000830 <send_byte>:
// sid = P5.0	// seriell Input LCD
//****************************************************************
// Sende ein Byte zum Display, senddate ist Bytewert
// rs => Command = 0 und Data = 1
void send_byte(uint8_t senddata, uint8_t rs)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	460a      	mov	r2, r1
 800083a:	71fb      	strb	r3, [r7, #7]
 800083c:	4613      	mov	r3, r2
 800083e:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	uint32_t sendwert, zw;
	zw = (uint32_t)senddata;   // Typconvertierung
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	60fb      	str	r3, [r7, #12]
	sendwert = 0x001f + ((zw & 0xf0)<<12) + ((zw&0x0f)<<8);
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800084a:	031a      	lsls	r2, r3, #12
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	f003 030f 	and.w	r3, r3, #15
 8000852:	021b      	lsls	r3, r3, #8
 8000854:	4413      	add	r3, r2
 8000856:	331f      	adds	r3, #31
 8000858:	613b      	str	r3, [r7, #16]
	if (rs == 1) sendwert = sendwert + 0x40;
 800085a:	79bb      	ldrb	r3, [r7, #6]
 800085c:	2b01      	cmp	r3, #1
 800085e:	d102      	bne.n	8000866 <send_byte+0x36>
 8000860:	693b      	ldr	r3, [r7, #16]
 8000862:	3340      	adds	r3, #64	; 0x40
 8000864:	613b      	str	r3, [r7, #16]
	for (i = 0; i<24;i++)	// serielle Ausgabe von 24Bit
 8000866:	2300      	movs	r3, #0
 8000868:	75fb      	strb	r3, [r7, #23]
 800086a:	e027      	b.n	80008bc <send_byte+0x8c>
	{  	CLR_BIT (PORT5->OUT,2)  ; // clk = 0;
 800086c:	4a16      	ldr	r2, [pc, #88]	; (80008c8 <send_byte+0x98>)
 800086e:	4b16      	ldr	r3, [pc, #88]	; (80008c8 <send_byte+0x98>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	f023 0304 	bic.w	r3, r3, #4
 8000876:	6013      	str	r3, [r2, #0]
		if ((sendwert & 0x00000001) == 0)  CLR_BIT(PORT5->OUT,0);  //sid = 0;
 8000878:	693b      	ldr	r3, [r7, #16]
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	2b00      	cmp	r3, #0
 8000880:	d106      	bne.n	8000890 <send_byte+0x60>
 8000882:	4a11      	ldr	r2, [pc, #68]	; (80008c8 <send_byte+0x98>)
 8000884:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <send_byte+0x98>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f023 0301 	bic.w	r3, r3, #1
 800088c:	6013      	str	r3, [r2, #0]
 800088e:	e005      	b.n	800089c <send_byte+0x6c>
		else SET_BIT(PORT5->OUT,0);
 8000890:	4a0d      	ldr	r2, [pc, #52]	; (80008c8 <send_byte+0x98>)
 8000892:	4b0d      	ldr	r3, [pc, #52]	; (80008c8 <send_byte+0x98>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	f043 0301 	orr.w	r3, r3, #1
 800089a:	6013      	str	r3, [r2, #0]
		wait_0();
 800089c:	f000 f816 	bl	80008cc <wait_0>
		SET_BIT ( PORT5->OUT, 2);	//sclk = 1;
 80008a0:	4a09      	ldr	r2, [pc, #36]	; (80008c8 <send_byte+0x98>)
 80008a2:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <send_byte+0x98>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	f043 0304 	orr.w	r3, r3, #4
 80008aa:	6013      	str	r3, [r2, #0]
		wait_0();
 80008ac:	f000 f80e 	bl	80008cc <wait_0>
		sendwert = sendwert >> 1;
 80008b0:	693b      	ldr	r3, [r7, #16]
 80008b2:	085b      	lsrs	r3, r3, #1
 80008b4:	613b      	str	r3, [r7, #16]
	uint8_t i;
	uint32_t sendwert, zw;
	zw = (uint32_t)senddata;   // Typconvertierung
	sendwert = 0x001f + ((zw & 0xf0)<<12) + ((zw&0x0f)<<8);
	if (rs == 1) sendwert = sendwert + 0x40;
	for (i = 0; i<24;i++)	// serielle Ausgabe von 24Bit
 80008b6:	7dfb      	ldrb	r3, [r7, #23]
 80008b8:	3301      	adds	r3, #1
 80008ba:	75fb      	strb	r3, [r7, #23]
 80008bc:	7dfb      	ldrb	r3, [r7, #23]
 80008be:	2b17      	cmp	r3, #23
 80008c0:	d9d4      	bls.n	800086c <send_byte+0x3c>
		wait_0();
		SET_BIT ( PORT5->OUT, 2);	//sclk = 1;
		wait_0();
		sendwert = sendwert >> 1;
	}
}
 80008c2:	3718      	adds	r7, #24
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	48028500 	.word	0x48028500

080008cc <wait_0>:
void wait_0(void)	// ca. 50 us warten
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
	uint16_t zaehler ;
	for (zaehler = 0; zaehler < 0xf; zaehler++);  // ca. 1 uSek Verz�gerung
 80008d2:	2300      	movs	r3, #0
 80008d4:	80fb      	strh	r3, [r7, #6]
 80008d6:	e002      	b.n	80008de <wait_0+0x12>
 80008d8:	88fb      	ldrh	r3, [r7, #6]
 80008da:	3301      	adds	r3, #1
 80008dc:	80fb      	strh	r3, [r7, #6]
 80008de:	88fb      	ldrh	r3, [r7, #6]
 80008e0:	2b0e      	cmp	r3, #14
 80008e2:	d9f9      	bls.n	80008d8 <wait_0+0xc>
}
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop

080008f0 <wait_bsy1>:
void wait_bsy1(void)	// ca. 50 us warten
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
	uint16_t zaehler ;
	for (zaehler = 0; zaehler < 0x7ff; zaehler++);
 80008f6:	2300      	movs	r3, #0
 80008f8:	80fb      	strh	r3, [r7, #6]
 80008fa:	e002      	b.n	8000902 <wait_bsy1+0x12>
 80008fc:	88fb      	ldrh	r3, [r7, #6]
 80008fe:	3301      	adds	r3, #1
 8000900:	80fb      	strh	r3, [r7, #6]
 8000902:	88fb      	ldrh	r3, [r7, #6]
 8000904:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8000908:	4293      	cmp	r3, r2
 800090a:	d9f7      	bls.n	80008fc <wait_bsy1+0xc>
}
 800090c:	370c      	adds	r7, #12
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop

08000918 <wait_bsy2>:
void wait_bsy2(void)	  // ca. 1.6 ms warten
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
	uint16_t zaehler ;
	for (zaehler = 0; zaehler < 0x7fff; zaehler++);
 800091e:	2300      	movs	r3, #0
 8000920:	80fb      	strh	r3, [r7, #6]
 8000922:	e002      	b.n	800092a <wait_bsy2+0x12>
 8000924:	88fb      	ldrh	r3, [r7, #6]
 8000926:	3301      	adds	r3, #1
 8000928:	80fb      	strh	r3, [r7, #6]
 800092a:	88fb      	ldrh	r3, [r7, #6]
 800092c:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8000930:	4293      	cmp	r3, r2
 8000932:	d9f7      	bls.n	8000924 <wait_bsy2+0xc>
}
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop

08000940 <lcd_init>:
void lcd_init(void)
{ 	// P5.0 => OUT
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
	PORT5->IOCR0 = PORT5->IOCR0 & 0xff000000; 	// P5.0, P5.1, P5.2
 8000944:	4a1a      	ldr	r2, [pc, #104]	; (80009b0 <lcd_init+0x70>)
 8000946:	4b1a      	ldr	r3, [pc, #104]	; (80009b0 <lcd_init+0x70>)
 8000948:	691b      	ldr	r3, [r3, #16]
 800094a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800094e:	6113      	str	r3, [r2, #16]
	PORT5->IOCR0 = PORT5->IOCR0 | 0x00800080;	// P5.0, P5.2 => OUT
 8000950:	4a17      	ldr	r2, [pc, #92]	; (80009b0 <lcd_init+0x70>)
 8000952:	4b17      	ldr	r3, [pc, #92]	; (80009b0 <lcd_init+0x70>)
 8000954:	691b      	ldr	r3, [r3, #16]
 8000956:	f043 1380 	orr.w	r3, r3, #8388736	; 0x800080
 800095a:	6113      	str	r3, [r2, #16]

	wait_bsy2();
 800095c:	f7ff ffdc 	bl	8000918 <wait_bsy2>
	wait_bsy2();
 8000960:	f7ff ffda 	bl	8000918 <wait_bsy2>
	// LCD Init
	send_byte(0x34,0); 			// 8 Bit Mode
 8000964:	2034      	movs	r0, #52	; 0x34
 8000966:	2100      	movs	r1, #0
 8000968:	f7ff ff62 	bl	8000830 <send_byte>
	wait_bsy2();
 800096c:	f7ff ffd4 	bl	8000918 <wait_bsy2>
	send_byte(0x09,0); 			// 4 Zeilen Mode
 8000970:	2009      	movs	r0, #9
 8000972:	2100      	movs	r1, #0
 8000974:	f7ff ff5c 	bl	8000830 <send_byte>
	wait_bsy2();
 8000978:	f7ff ffce 	bl	8000918 <wait_bsy2>
	send_byte(0x30,0); 			// 8 Bit Datenl�ge
 800097c:	2030      	movs	r0, #48	; 0x30
 800097e:	2100      	movs	r1, #0
 8000980:	f7ff ff56 	bl	8000830 <send_byte>
	wait_bsy2();
 8000984:	f7ff ffc8 	bl	8000918 <wait_bsy2>
	send_byte(0x0f,0); 			// display ein , Cursor ein
 8000988:	200f      	movs	r0, #15
 800098a:	2100      	movs	r1, #0
 800098c:	f7ff ff50 	bl	8000830 <send_byte>
	wait_bsy2();
 8000990:	f7ff ffc2 	bl	8000918 <wait_bsy2>
	send_byte(0x01,0); 			// clear Display
 8000994:	2001      	movs	r0, #1
 8000996:	2100      	movs	r1, #0
 8000998:	f7ff ff4a 	bl	8000830 <send_byte>
	wait_bsy2();
 800099c:	f7ff ffbc 	bl	8000918 <wait_bsy2>
	send_byte(0x07,0); 			// Cursor autoincrement
 80009a0:	2007      	movs	r0, #7
 80009a2:	2100      	movs	r1, #0
 80009a4:	f7ff ff44 	bl	8000830 <send_byte>
	wait_bsy2();
 80009a8:	f7ff ffb6 	bl	8000918 <wait_bsy2>
}
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	48028500 	.word	0x48028500

080009b4 <lcd_clear>:
void lcd_clear(void)
{   send_byte( 01 ,0);  // CLR Befehl
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	2001      	movs	r0, #1
 80009ba:	2100      	movs	r1, #0
 80009bc:	f7ff ff38 	bl	8000830 <send_byte>
	wait_bsy2();
 80009c0:	f7ff ffaa 	bl	8000918 <wait_bsy2>
	send_byte( 0x0e ,0); // Cursor on
 80009c4:	200e      	movs	r0, #14
 80009c6:	2100      	movs	r1, #0
 80009c8:	f7ff ff32 	bl	8000830 <send_byte>
	wait_bsy1();
 80009cc:	f7ff ff90 	bl	80008f0 <wait_bsy1>
}
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop

080009d4 <lcd_char>:
void lcd_char(int8_t zeichen)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	71fb      	strb	r3, [r7, #7]
	send_byte(zeichen,1);
 80009de:	79fb      	ldrb	r3, [r7, #7]
 80009e0:	4618      	mov	r0, r3
 80009e2:	2101      	movs	r1, #1
 80009e4:	f7ff ff24 	bl	8000830 <send_byte>
	wait_bsy1();
 80009e8:	f7ff ff82 	bl	80008f0 <wait_bsy1>
	wait_bsy1();
 80009ec:	f7ff ff80 	bl	80008f0 <wait_bsy1>
}
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop

080009f8 <lcd_int>:
	lcd_char(i);
	wert += 0x30;
	lcd_char(wert);
}
void lcd_int(uint16_t wert_16)
{	// Ausgabe von 0 bis 99999 !!!!
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	80fb      	strh	r3, [r7, #6]
	uint8_t i;

	i = wert_16 / 10000; 	// Anzahl 1000er
 8000a02:	88fb      	ldrh	r3, [r7, #6]
 8000a04:	4a38      	ldr	r2, [pc, #224]	; (8000ae8 <lcd_int+0xf0>)
 8000a06:	fba2 2303 	umull	r2, r3, r2, r3
 8000a0a:	0b5b      	lsrs	r3, r3, #13
 8000a0c:	b29b      	uxth	r3, r3
 8000a0e:	73fb      	strb	r3, [r7, #15]
	wert_16 %= 10000;			// Rest nach 1000er Division
 8000a10:	88fb      	ldrh	r3, [r7, #6]
 8000a12:	4a35      	ldr	r2, [pc, #212]	; (8000ae8 <lcd_int+0xf0>)
 8000a14:	fba2 1203 	umull	r1, r2, r2, r3
 8000a18:	0b52      	lsrs	r2, r2, #13
 8000a1a:	f242 7110 	movw	r1, #10000	; 0x2710
 8000a1e:	fb01 f202 	mul.w	r2, r1, r2
 8000a22:	1a9b      	subs	r3, r3, r2
 8000a24:	80fb      	strh	r3, [r7, #6]
	lcd_char(i+0x30);   	 	// Ausgabe als ASCII Zeichen
 8000a26:	7bfb      	ldrb	r3, [r7, #15]
 8000a28:	3330      	adds	r3, #48	; 0x30
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	b25b      	sxtb	r3, r3
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff ffcf 	bl	80009d4 <lcd_char>
	i = wert_16 / 1000; 	// Anzahl 1000er
 8000a36:	88fb      	ldrh	r3, [r7, #6]
 8000a38:	4a2c      	ldr	r2, [pc, #176]	; (8000aec <lcd_int+0xf4>)
 8000a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a3e:	099b      	lsrs	r3, r3, #6
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	73fb      	strb	r3, [r7, #15]
	wert_16 %= 1000;			// Rest nach 1000er Division
 8000a44:	88fb      	ldrh	r3, [r7, #6]
 8000a46:	4a29      	ldr	r2, [pc, #164]	; (8000aec <lcd_int+0xf4>)
 8000a48:	fba2 1203 	umull	r1, r2, r2, r3
 8000a4c:	0992      	lsrs	r2, r2, #6
 8000a4e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a52:	fb01 f202 	mul.w	r2, r1, r2
 8000a56:	1a9b      	subs	r3, r3, r2
 8000a58:	80fb      	strh	r3, [r7, #6]
	lcd_char(i+0x30);    	// Ausgabe als ASCII Zeichen
 8000a5a:	7bfb      	ldrb	r3, [r7, #15]
 8000a5c:	3330      	adds	r3, #48	; 0x30
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	b25b      	sxtb	r3, r3
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff ffb5 	bl	80009d4 <lcd_char>
	i= wert_16 / 100;
 8000a6a:	88fb      	ldrh	r3, [r7, #6]
 8000a6c:	4a20      	ldr	r2, [pc, #128]	; (8000af0 <lcd_int+0xf8>)
 8000a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a72:	095b      	lsrs	r3, r3, #5
 8000a74:	b29b      	uxth	r3, r3
 8000a76:	73fb      	strb	r3, [r7, #15]
	wert_16 %= 100;
 8000a78:	88fb      	ldrh	r3, [r7, #6]
 8000a7a:	4a1d      	ldr	r2, [pc, #116]	; (8000af0 <lcd_int+0xf8>)
 8000a7c:	fba2 1203 	umull	r1, r2, r2, r3
 8000a80:	0952      	lsrs	r2, r2, #5
 8000a82:	2164      	movs	r1, #100	; 0x64
 8000a84:	fb01 f202 	mul.w	r2, r1, r2
 8000a88:	1a9b      	subs	r3, r3, r2
 8000a8a:	80fb      	strh	r3, [r7, #6]
	lcd_char(i+0x30);
 8000a8c:	7bfb      	ldrb	r3, [r7, #15]
 8000a8e:	3330      	adds	r3, #48	; 0x30
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	b25b      	sxtb	r3, r3
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff ff9c 	bl	80009d4 <lcd_char>
	i = wert_16 / 10;
 8000a9c:	88fb      	ldrh	r3, [r7, #6]
 8000a9e:	4a15      	ldr	r2, [pc, #84]	; (8000af4 <lcd_int+0xfc>)
 8000aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8000aa4:	08db      	lsrs	r3, r3, #3
 8000aa6:	b29b      	uxth	r3, r3
 8000aa8:	73fb      	strb	r3, [r7, #15]
	wert_16 %= 10;
 8000aaa:	88fa      	ldrh	r2, [r7, #6]
 8000aac:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <lcd_int+0xfc>)
 8000aae:	fba3 1302 	umull	r1, r3, r3, r2
 8000ab2:	08d9      	lsrs	r1, r3, #3
 8000ab4:	460b      	mov	r3, r1
 8000ab6:	009b      	lsls	r3, r3, #2
 8000ab8:	440b      	add	r3, r1
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	80fb      	strh	r3, [r7, #6]
	lcd_char(i+0x30);
 8000ac0:	7bfb      	ldrb	r3, [r7, #15]
 8000ac2:	3330      	adds	r3, #48	; 0x30
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	b25b      	sxtb	r3, r3
 8000aca:	4618      	mov	r0, r3
 8000acc:	f7ff ff82 	bl	80009d4 <lcd_char>
	wert_16 += 0x30;
 8000ad0:	88fb      	ldrh	r3, [r7, #6]
 8000ad2:	3330      	adds	r3, #48	; 0x30
 8000ad4:	80fb      	strh	r3, [r7, #6]
	lcd_char((char)wert_16);
 8000ad6:	88fb      	ldrh	r3, [r7, #6]
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	b25b      	sxtb	r3, r3
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff ff79 	bl	80009d4 <lcd_char>
}
 8000ae2:	3710      	adds	r7, #16
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	d1b71759 	.word	0xd1b71759
 8000aec:	10624dd3 	.word	0x10624dd3
 8000af0:	51eb851f 	.word	0x51eb851f
 8000af4:	cccccccd 	.word	0xcccccccd

08000af8 <lcd_setcursor>:
void lcd_setcursor( uint8_t zeile, uint8_t spalte )
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	460a      	mov	r2, r1
 8000b02:	71fb      	strb	r3, [r7, #7]
 8000b04:	4613      	mov	r3, r2
 8000b06:	71bb      	strb	r3, [r7, #6]
  uint8_t position;
  switch(zeile)
 8000b08:	79fb      	ldrb	r3, [r7, #7]
 8000b0a:	3b01      	subs	r3, #1
 8000b0c:	2b03      	cmp	r3, #3
 8000b0e:	d817      	bhi.n	8000b40 <lcd_setcursor+0x48>
 8000b10:	a201      	add	r2, pc, #4	; (adr r2, 8000b18 <lcd_setcursor+0x20>)
 8000b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b16:	bf00      	nop
 8000b18:	08000b29 	.word	0x08000b29
 8000b1c:	08000b2f 	.word	0x08000b2f
 8000b20:	08000b35 	.word	0x08000b35
 8000b24:	08000b3b 	.word	0x08000b3b
  {
    case 1:  position = 0x00; break;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	73fb      	strb	r3, [r7, #15]
 8000b2c:	e00b      	b.n	8000b46 <lcd_setcursor+0x4e>
    case 2:  position = 0x20; break;
 8000b2e:	2320      	movs	r3, #32
 8000b30:	73fb      	strb	r3, [r7, #15]
 8000b32:	e008      	b.n	8000b46 <lcd_setcursor+0x4e>
    case 3:  position = 0x40; break;
 8000b34:	2340      	movs	r3, #64	; 0x40
 8000b36:	73fb      	strb	r3, [r7, #15]
 8000b38:	e005      	b.n	8000b46 <lcd_setcursor+0x4e>
    case 4:  position = 0x60; break;
 8000b3a:	2360      	movs	r3, #96	; 0x60
 8000b3c:	73fb      	strb	r3, [r7, #15]
 8000b3e:	e002      	b.n	8000b46 <lcd_setcursor+0x4e>
    default: position = 0x00; break;
 8000b40:	2300      	movs	r3, #0
 8000b42:	73fb      	strb	r3, [r7, #15]
 8000b44:	bf00      	nop
  }

  position += (spalte-1);
 8000b46:	79ba      	ldrb	r2, [r7, #6]
 8000b48:	7bfb      	ldrb	r3, [r7, #15]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	3b01      	subs	r3, #1
 8000b50:	73fb      	strb	r3, [r7, #15]
  send_byte(position | 0x80, 0);
 8000b52:	7bfb      	ldrb	r3, [r7, #15]
 8000b54:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	f7ff fe67 	bl	8000830 <send_byte>
  wait_bsy1();
 8000b62:	f7ff fec5 	bl	80008f0 <wait_bsy1>
  wait_bsy1();
 8000b66:	f7ff fec3 	bl	80008f0 <wait_bsy1>
}
 8000b6a:	3710      	adds	r7, #16
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <ccu4x_enable>:
	while ((SCU_GENERAL->MIRRSTS ) & 0x80) ;	// RTC Control Busy ?
	RTC->CTR |= 0x1;	// Enable RTC
}
//****************************************************************************
void ccu4x_enable(void)
{ //System control unit
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  SCU_RESET->PRSET0 |= 0x1c;	// Reset CCU40,CCU41,CCU42 =>				
 8000b74:	4a0d      	ldr	r2, [pc, #52]	; (8000bac <ccu4x_enable+0x3c>)
 8000b76:	4b0d      	ldr	r3, [pc, #52]	; (8000bac <ccu4x_enable+0x3c>)
 8000b78:	691b      	ldr	r3, [r3, #16]
 8000b7a:	f043 031c 	orr.w	r3, r3, #28
 8000b7e:	6113      	str	r3, [r2, #16]
  SCU_RESET->PRCLR0 |= 0x1c; 	// re assert RESET
 8000b80:	4a0a      	ldr	r2, [pc, #40]	; (8000bac <ccu4x_enable+0x3c>)
 8000b82:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <ccu4x_enable+0x3c>)
 8000b84:	695b      	ldr	r3, [r3, #20]
 8000b86:	f043 031c 	orr.w	r3, r3, #28
 8000b8a:	6153      	str	r3, [r2, #20]
  SCU_CLK->CLKSET   |= 0x10; 	// CCU-CLK enable
 8000b8c:	4a08      	ldr	r2, [pc, #32]	; (8000bb0 <ccu4x_enable+0x40>)
 8000b8e:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <ccu4x_enable+0x40>)
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	f043 0310 	orr.w	r3, r3, #16
 8000b96:	6053      	str	r3, [r2, #4]
  SCU_GENERAL->CCUCON |= 0x0f;	//CCU42_CC40 global enable
 8000b98:	4a06      	ldr	r2, [pc, #24]	; (8000bb4 <ccu4x_enable+0x44>)
 8000b9a:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <ccu4x_enable+0x44>)
 8000b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9e:	f043 030f 	orr.w	r3, r3, #15
 8000ba2:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	50004400 	.word	0x50004400
 8000bb0:	50004600 	.word	0x50004600
 8000bb4:	50004000 	.word	0x50004000

08000bb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bbc:	4b04      	ldr	r3, [pc, #16]	; (8000bd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000bc4:	0a1b      	lsrs	r3, r3, #8
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	db0b      	blt.n	8000bfe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000be6:	4908      	ldr	r1, [pc, #32]	; (8000c08 <__NVIC_EnableIRQ+0x34>)
 8000be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bec:	095b      	lsrs	r3, r3, #5
 8000bee:	79fa      	ldrb	r2, [r7, #7]
 8000bf0:	f002 021f 	and.w	r2, r2, #31
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	e000e100 	.word	0xe000e100

08000c0c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	db0c      	blt.n	8000c38 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c1e:	4909      	ldr	r1, [pc, #36]	; (8000c44 <__NVIC_ClearPendingIRQ+0x38>)
 8000c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c24:	095b      	lsrs	r3, r3, #5
 8000c26:	79fa      	ldrb	r2, [r7, #7]
 8000c28:	f002 021f 	and.w	r2, r2, #31
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c32:	3360      	adds	r3, #96	; 0x60
 8000c34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	e000e100 	.word	0xe000e100

08000c48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	6039      	str	r1, [r7, #0]
 8000c52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	db0a      	blt.n	8000c72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5c:	490d      	ldr	r1, [pc, #52]	; (8000c94 <__NVIC_SetPriority+0x4c>)
 8000c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c62:	683a      	ldr	r2, [r7, #0]
 8000c64:	b2d2      	uxtb	r2, r2
 8000c66:	0092      	lsls	r2, r2, #2
 8000c68:	b2d2      	uxtb	r2, r2
 8000c6a:	440b      	add	r3, r1
 8000c6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8000c70:	e00a      	b.n	8000c88 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c72:	4909      	ldr	r1, [pc, #36]	; (8000c98 <__NVIC_SetPriority+0x50>)
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	f003 030f 	and.w	r3, r3, #15
 8000c7a:	3b04      	subs	r3, #4
 8000c7c:	683a      	ldr	r2, [r7, #0]
 8000c7e:	b2d2      	uxtb	r2, r2
 8000c80:	0092      	lsls	r2, r2, #2
 8000c82:	b2d2      	uxtb	r2, r2
 8000c84:	440b      	add	r3, r1
 8000c86:	761a      	strb	r2, [r3, #24]
  }
}
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	e000e100 	.word	0xe000e100
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b089      	sub	sp, #36	; 0x24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	f003 0307 	and.w	r3, r3, #7
 8000cae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	f1c3 0307 	rsb	r3, r3, #7
 8000cb6:	2b06      	cmp	r3, #6
 8000cb8:	bf28      	it	cs
 8000cba:	2306      	movcs	r3, #6
 8000cbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	3306      	adds	r3, #6
 8000cc2:	2b06      	cmp	r3, #6
 8000cc4:	d902      	bls.n	8000ccc <NVIC_EncodePriority+0x30>
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	3b01      	subs	r3, #1
 8000cca:	e000      	b.n	8000cce <NVIC_EncodePriority+0x32>
 8000ccc:	2300      	movs	r3, #0
 8000cce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	1e5a      	subs	r2, r3, #1
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	401a      	ands	r2, r3
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cea:	1e59      	subs	r1, r3, #1
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8000cf0:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3724      	adds	r7, #36	; 0x24
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop

08000d00 <PIN_INTERRUPT_Init>:
/*
 * API to initialize the PIN_INTERRUPT APP ERU Event Trigger Logic, Output Gating Unit Hardware initialization
 * and NVIC node configuration.
 */
PIN_INTERRUPT_STATUS_t PIN_INTERRUPT_Init(const PIN_INTERRUPT_t *const handle)
{
 8000d00:	b590      	push	{r4, r7, lr}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("PIN_INTERRUPT_Init: PIN_INTERRUPT APP handle function pointer uninitialized", (handle != NULL));

  /* Initializes input pin characteristics */
  XMC_GPIO_Init(handle->port, handle->pin, &handle->gpio_config);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6859      	ldr	r1, [r3, #4]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	3308      	adds	r3, #8
 8000d16:	4608      	mov	r0, r1
 8000d18:	4611      	mov	r1, r2
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	f7ff fc7c 	bl	8000618 <XMC_GPIO_Init>
  /* ERU Event Trigger Logic Hardware initialization based on UI */
  XMC_ERU_ETL_Init(handle->eru, handle->etl, &handle->etl_config);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6819      	ldr	r1, [r3, #0]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	7fda      	ldrb	r2, [r3, #31]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3314      	adds	r3, #20
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	4611      	mov	r1, r2
 8000d30:	461a      	mov	r2, r3
 8000d32:	f7ff fd33 	bl	800079c <XMC_ERU_ETL_Init>
  /* OGU is configured to generate event on configured trigger edge */
  XMC_ERU_OGU_SetServiceRequestMode(handle->eru, handle->ogu, XMC_ERU_OGU_SERVICE_REQUEST_ON_TRIGGER);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d40:	4610      	mov	r0, r2
 8000d42:	4619      	mov	r1, r3
 8000d44:	2201      	movs	r2, #1
 8000d46:	f7ff fd4f 	bl	80007e8 <XMC_ERU_OGU_SetServiceRequestMode>
#if (UC_FAMILY == XMC1)
  /* Configure NVIC node and priority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, handle->irq_priority);
#else
  /* Configure NVIC node, priority and subpriority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	7f1c      	ldrb	r4, [r3, #28]
 8000d4e:	f7ff ff33 	bl	8000bb8 <__NVIC_GetPriorityGrouping>
 8000d52:	4601      	mov	r1, r0
                    handle->irq_priority, handle->irq_subpriority));
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	7f5b      	ldrb	r3, [r3, #29]
#if (UC_FAMILY == XMC1)
  /* Configure NVIC node and priority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, handle->irq_priority);
#else
  /* Configure NVIC node, priority and subpriority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8000d58:	461a      	mov	r2, r3
                    handle->irq_priority, handle->irq_subpriority));
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	7f9b      	ldrb	r3, [r3, #30]
#if (UC_FAMILY == XMC1)
  /* Configure NVIC node and priority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, handle->irq_priority);
#else
  /* Configure NVIC node, priority and subpriority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8000d5e:	4608      	mov	r0, r1
 8000d60:	4611      	mov	r1, r2
 8000d62:	461a      	mov	r2, r3
 8000d64:	f7ff ff9a 	bl	8000c9c <NVIC_EncodePriority>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	b263      	sxtb	r3, r4
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	4611      	mov	r1, r2
 8000d70:	f7ff ff6a 	bl	8000c48 <__NVIC_SetPriority>
                    handle->irq_priority, handle->irq_subpriority));
#endif
#if (UC_SERIES == XMC14)
  XMC_SCU_SetInterruptControl((IRQn_Type)handle->IRQn, (XMC_SCU_IRQCTRL_t)handle->irqctrl);
#endif
  if (true == handle->enable_at_init)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d00b      	beq.n	8000d96 <PIN_INTERRUPT_Init+0x96>
  {
    /* Clear pending interrupt before enabling it */
    NVIC_ClearPendingIRQ((IRQn_Type)handle->IRQn);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	7f1b      	ldrb	r3, [r3, #28]
 8000d82:	b25b      	sxtb	r3, r3
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff ff41 	bl	8000c0c <__NVIC_ClearPendingIRQ>
    /* Enable NVIC node */
    NVIC_EnableIRQ((IRQn_Type)handle->IRQn);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	7f1b      	ldrb	r3, [r3, #28]
 8000d8e:	b25b      	sxtb	r3, r3
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff ff1f 	bl	8000bd4 <__NVIC_EnableIRQ>
  }
  return (PIN_INTERRUPT_STATUS_SUCCESS);
 8000d96:	2300      	movs	r3, #0
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd90      	pop	{r4, r7, pc}

08000da0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <__NVIC_SetPriorityGrouping+0x44>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000db6:	68ba      	ldr	r2, [r7, #8]
 8000db8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000dc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dd0:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 8000dd2:	4a04      	ldr	r2, [pc, #16]	; (8000de4 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	60d3      	str	r3, [r2, #12]
}
 8000dd8:	3714      	adds	r7, #20
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 8000dee:	2001      	movs	r0, #1
 8000df0:	f7ff ffd6 	bl	8000da0 <__NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000df4:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 8000df6:	4b21      	ldr	r3, [pc, #132]	; (8000e7c <SystemCoreSetup+0x94>)
 8000df8:	4a21      	ldr	r2, [pc, #132]	; (8000e80 <SystemCoreSetup+0x98>)
 8000dfa:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000dfc:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000e00:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8000e02:	4a1e      	ldr	r2, [pc, #120]	; (8000e7c <SystemCoreSetup+0x94>)
 8000e04:	4b1d      	ldr	r3, [pc, #116]	; (8000e7c <SystemCoreSetup+0x94>)
 8000e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e0a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e0e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 8000e12:	4b1c      	ldr	r3, [pc, #112]	; (8000e84 <SystemCoreSetup+0x9c>)
 8000e14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000e18:	3314      	adds	r3, #20
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	f023 030f 	bic.w	r3, r3, #15
 8000e24:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	f043 0303 	orr.w	r3, r3, #3
 8000e2c:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8000e2e:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <SystemCoreSetup+0x9c>)
 8000e30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000e34:	3314      	adds	r3, #20
 8000e36:	687a      	ldr	r2, [r7, #4]
 8000e38:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 8000e3a:	4a10      	ldr	r2, [pc, #64]	; (8000e7c <SystemCoreSetup+0x94>)
 8000e3c:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <SystemCoreSetup+0x94>)
 8000e3e:	695b      	ldr	r3, [r3, #20]
 8000e40:	f023 0310 	bic.w	r3, r3, #16
 8000e44:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 8000e46:	4a0d      	ldr	r2, [pc, #52]	; (8000e7c <SystemCoreSetup+0x94>)
 8000e48:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <SystemCoreSetup+0x94>)
 8000e4a:	695b      	ldr	r3, [r3, #20]
 8000e4c:	f023 0308 	bic.w	r3, r3, #8
 8000e50:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000e52:	4a0a      	ldr	r2, [pc, #40]	; (8000e7c <SystemCoreSetup+0x94>)
 8000e54:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <SystemCoreSetup+0x94>)
 8000e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e5c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 8000e5e:	4a07      	ldr	r2, [pc, #28]	; (8000e7c <SystemCoreSetup+0x94>)
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <SystemCoreSetup+0x94>)
 8000e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e64:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000e68:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 8000e6a:	4a04      	ldr	r2, [pc, #16]	; (8000e7c <SystemCoreSetup+0x94>)
 8000e6c:	4b03      	ldr	r3, [pc, #12]	; (8000e7c <SystemCoreSetup+0x94>)
 8000e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e74:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	e000ed00 	.word	0xe000ed00
 8000e80:	08000000 	.word	0x08000000
 8000e84:	58001000 	.word	0x58001000

08000e88 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	71fb      	strb	r3, [r7, #7]
  if (init_status == DAVE_STATUS_SUCCESS)
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d104      	bne.n	8000ea2 <DAVE_Init+0x1a>
  {
	 /**  Initialization of PIN_INTERRUPT APP instance PIN_INTERRUPT_0 */
	 init_status = (DAVE_STATUS_t)PIN_INTERRUPT_Init(&PIN_INTERRUPT_0); 
 8000e98:	4804      	ldr	r0, [pc, #16]	; (8000eac <DAVE_Init+0x24>)
 8000e9a:	f7ff ff31 	bl	8000d00 <PIN_INTERRUPT_Init>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	08001908 	.word	0x08001908

08000eb0 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	460b      	mov	r3, r1
 8000eba:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ec0:	78fb      	ldrb	r3, [r7, #3]
 8000ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ec6:	f003 0301 	and.w	r3, r3, #1
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <PIN_INTERRUPT_GetPinValue>:
*   return (1);
* }
*  @endcode
*/
__STATIC_INLINE uint32_t PIN_INTERRUPT_GetPinValue(const PIN_INTERRUPT_t *const handle)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("PIN_INTERRUPT_GetPinValue: Handler null pointer", handle != NULL);
  return (XMC_GPIO_GetInput(handle->port, handle->pin));
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	685a      	ldr	r2, [r3, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000eea:	4610      	mov	r0, r2
 8000eec:	4619      	mov	r1, r3
 8000eee:	f7ff ffdf 	bl	8000eb0 <XMC_GPIO_GetInput>
 8000ef2:	4603      	mov	r3, r0
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	0000      	movs	r0, r0
	...

08000f00 <main>:

void init_pwm(uint32_t vorteiler, uint32_t periode, uint32_t w);
void init_timer(void);
void ccu40_enable ( void );

int main(void) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  DAVE_Init();                          // Initialization of DAVE APPs  --> PIN Interrupt
 8000f04:	f7ff ffc0 	bl	8000e88 <DAVE_Init>
  init_pwm(0b1010, 58596, 58584);       // pwm-timer Vorteiler: 0b1010 ... Periode: 58596 = 500ms/8.533us = 12 ... Compare-Wert = 58584 = 58596 - (100us/500ms)*58596
 8000f08:	200a      	movs	r0, #10
 8000f0a:	f24e 41e4 	movw	r1, #58596	; 0xe4e4
 8000f0e:	f24e 42d8 	movw	r2, #58584	; 0xe4d8
 8000f12:	f000 f8a3 	bl	800105c <init_pwm>
  init_timer();                         // timer
 8000f16:	f000 f8cb 	bl	80010b0 <init_timer>

  lcd_init();                           // LC-Display
 8000f1a:	f7ff fd11 	bl	8000940 <lcd_init>
  lcd_clear();                          // LC-Display
 8000f1e:	f7ff fd49 	bl	80009b4 <lcd_clear>

  while(1U) {                           
	  if (state == 1) {                   // Abfrage nach der Falling Edge
 8000f22:	4b35      	ldr	r3, [pc, #212]	; (8000ff8 <main+0xf8>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d15b      	bne.n	8000fe2 <main+0xe2>
		  lcd_setcursor(1,1);
 8000f2a:	2001      	movs	r0, #1
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	f7ff fde3 	bl	8000af8 <lcd_setcursor>
		  ticks = ticks * 533.33/1000.0;			                                  // Umrechnung: Ticks in Mikrosekunden
 8000f32:	4b32      	ldr	r3, [pc, #200]	; (8000ffc <main+0xfc>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4618      	mov	r0, r3
 8000f38:	f000 fa18 	bl	800136c <__aeabi_ui2d>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	460b      	mov	r3, r1
 8000f40:	4610      	mov	r0, r2
 8000f42:	4619      	mov	r1, r3
 8000f44:	a328      	add	r3, pc, #160	; (adr r3, 8000fe8 <main+0xe8>)
 8000f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f4a:	f000 fa85 	bl	8001458 <__aeabi_dmul>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	460b      	mov	r3, r1
 8000f52:	4610      	mov	r0, r2
 8000f54:	4619      	mov	r1, r3
 8000f56:	f04f 0200 	mov.w	r2, #0
 8000f5a:	4b29      	ldr	r3, [pc, #164]	; (8001000 <main+0x100>)
 8000f5c:	f000 fba6 	bl	80016ac <__aeabi_ddiv>
 8000f60:	4602      	mov	r2, r0
 8000f62:	460b      	mov	r3, r1
 8000f64:	4610      	mov	r0, r2
 8000f66:	4619      	mov	r1, r3
 8000f68:	f000 fc88 	bl	800187c <__aeabi_d2uiz>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	4b23      	ldr	r3, [pc, #140]	; (8000ffc <main+0xfc>)
 8000f70:	601a      	str	r2, [r3, #0]
		  abstand = 344 * 0.5 * ticks * (1.0/1000000.0) * 100.0;                // Umrechnung: Mikrosekunden in cm
 8000f72:	4b22      	ldr	r3, [pc, #136]	; (8000ffc <main+0xfc>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 f9f8 	bl	800136c <__aeabi_ui2d>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	460b      	mov	r3, r1
 8000f80:	4610      	mov	r0, r2
 8000f82:	4619      	mov	r1, r3
 8000f84:	f04f 0200 	mov.w	r2, #0
 8000f88:	4b1e      	ldr	r3, [pc, #120]	; (8001004 <main+0x104>)
 8000f8a:	f000 fa65 	bl	8001458 <__aeabi_dmul>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	460b      	mov	r3, r1
 8000f92:	4610      	mov	r0, r2
 8000f94:	4619      	mov	r1, r3
 8000f96:	a316      	add	r3, pc, #88	; (adr r3, 8000ff0 <main+0xf0>)
 8000f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f9c:	f000 fa5c 	bl	8001458 <__aeabi_dmul>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	4610      	mov	r0, r2
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	f04f 0200 	mov.w	r2, #0
 8000fac:	4b16      	ldr	r3, [pc, #88]	; (8001008 <main+0x108>)
 8000fae:	f000 fa53 	bl	8001458 <__aeabi_dmul>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	4610      	mov	r0, r2
 8000fb8:	4619      	mov	r1, r3
 8000fba:	f000 fc5f 	bl	800187c <__aeabi_d2uiz>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	b29a      	uxth	r2, r3
 8000fc2:	4b12      	ldr	r3, [pc, #72]	; (800100c <main+0x10c>)
 8000fc4:	801a      	strh	r2, [r3, #0]
		  lcd_int(abstand);                                                     // Abstand aufs Display Ausgeben
 8000fc6:	4b11      	ldr	r3, [pc, #68]	; (800100c <main+0x10c>)
 8000fc8:	881b      	ldrh	r3, [r3, #0]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff fd14 	bl	80009f8 <lcd_int>
		  lcd_char(0x63);                                                       // Einheit augeben
 8000fd0:	2063      	movs	r0, #99	; 0x63
 8000fd2:	f7ff fcff 	bl	80009d4 <lcd_char>
		  lcd_char(0x6D);                                                       // Einheit augeben
 8000fd6:	206d      	movs	r0, #109	; 0x6d
 8000fd8:	f7ff fcfc 	bl	80009d4 <lcd_char>
		  state = 0;
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <main+0xf8>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	701a      	strb	r2, [r3, #0]
	  }
  }
 8000fe2:	e79e      	b.n	8000f22 <main+0x22>
 8000fe4:	f3af 8000 	nop.w
 8000fe8:	d70a3d71 	.word	0xd70a3d71
 8000fec:	4080aaa3 	.word	0x4080aaa3
 8000ff0:	a0b5ed8d 	.word	0xa0b5ed8d
 8000ff4:	3eb0c6f7 	.word	0x3eb0c6f7
 8000ff8:	20000000 	.word	0x20000000
 8000ffc:	20000008 	.word	0x20000008
 8001000:	408f4000 	.word	0x408f4000
 8001004:	40658000 	.word	0x40658000
 8001008:	40590000 	.word	0x40590000
 800100c:	20000004 	.word	0x20000004

08001010 <ERU0_3_IRQHandler>:
}

void IRQHandler(void) {                                                     // Interrupt Handler --> Wenn das PWM Signal eine rising / falling edge hat
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  if (PIN_INTERRUPT_GetPinValue(&PIN_INTERRUPT_0) > 0) {                    // case detection: rising oder falling edge?
 8001014:	480d      	ldr	r0, [pc, #52]	; (800104c <ERU0_3_IRQHandler+0x3c>)
 8001016:	f7ff ff5f 	bl	8000ed8 <PIN_INTERRUPT_GetPinValue>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d006      	beq.n	800102e <ERU0_3_IRQHandler+0x1e>
	  CCU40_CC40->TCSET = 0x1;                                                // Rising Edge: Timer starten
 8001020:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <ERU0_3_IRQHandler+0x40>)
 8001022:	2201      	movs	r2, #1
 8001024:	60da      	str	r2, [r3, #12]
	  state = 2;
 8001026:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <ERU0_3_IRQHandler+0x44>)
 8001028:	2202      	movs	r2, #2
 800102a:	701a      	strb	r2, [r3, #0]
 800102c:	e00c      	b.n	8001048 <ERU0_3_IRQHandler+0x38>
  }
  else {                                                                    // Falling Edge
	  CCU40_CC40->TCCLR = 1;                                                  // Timer Stop
 800102e:	4b08      	ldr	r3, [pc, #32]	; (8001050 <ERU0_3_IRQHandler+0x40>)
 8001030:	2201      	movs	r2, #1
 8001032:	611a      	str	r2, [r3, #16]
	  ticks = CCU40_CC40->TIMER;                                              // Timer Wert auslesen
 8001034:	4b06      	ldr	r3, [pc, #24]	; (8001050 <ERU0_3_IRQHandler+0x40>)
 8001036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001038:	4a07      	ldr	r2, [pc, #28]	; (8001058 <ERU0_3_IRQHandler+0x48>)
 800103a:	6013      	str	r3, [r2, #0]
	  CCU40_CC40->TCCLR = 0x2;                                                // Timer clear
 800103c:	4b04      	ldr	r3, [pc, #16]	; (8001050 <ERU0_3_IRQHandler+0x40>)
 800103e:	2202      	movs	r2, #2
 8001040:	611a      	str	r2, [r3, #16]
	  state = 1;
 8001042:	4b04      	ldr	r3, [pc, #16]	; (8001054 <ERU0_3_IRQHandler+0x44>)
 8001044:	2201      	movs	r2, #1
 8001046:	701a      	strb	r2, [r3, #0]
  }
}
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	08001908 	.word	0x08001908
 8001050:	4000c100 	.word	0x4000c100
 8001054:	20000000 	.word	0x20000000
 8001058:	20000008 	.word	0x20000008

0800105c <init_pwm>:

void init_pwm(uint32_t vorteiler, uint32_t periode, uint32_t w) {
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
  /*
    *   PWM init
    *   Muss vor init_timer() ausgeführt werden
    *   CCU42-Timermodul
    */
  ccu4x_enable();                   // Freigabe CCU Timermodule
 8001068:	f7ff fd82 	bl	8000b70 <ccu4x_enable>
  CCU42->GIDLC = 0x10F;             // Vorteiler enable, IDLE CCU40 disable
 800106c:	4b0d      	ldr	r3, [pc, #52]	; (80010a4 <init_pwm+0x48>)
 800106e:	f240 120f 	movw	r2, #271	; 0x10f
 8001072:	60da      	str	r2, [r3, #12]
  CCU42_CC40->TC = 0x04;            // Shadow transfer enable on clear
 8001074:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <init_pwm+0x4c>)
 8001076:	2204      	movs	r2, #4
 8001078:	615a      	str	r2, [r3, #20]
  CCU42_CC40->PSC = vorteiler;      // Vorteiler-Wert festlegen,
 800107a:	4a0b      	ldr	r2, [pc, #44]	; (80010a8 <init_pwm+0x4c>)
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	6253      	str	r3, [r2, #36]	; 0x24
  CCU42_CC40->PRS = periode;        // Perioden Wert festlegen
 8001080:	4a09      	ldr	r2, [pc, #36]	; (80010a8 <init_pwm+0x4c>)
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	6353      	str	r3, [r2, #52]	; 0x34

  CCU42_CC40->CRS = w;              // Compare-Wert festlegen
 8001086:	4a08      	ldr	r2, [pc, #32]	; (80010a8 <init_pwm+0x4c>)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	63d3      	str	r3, [r2, #60]	; 0x3c
  CCU42->GCSS = 1;                  // Shadow transfer request
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <init_pwm+0x48>)
 800108e:	2201      	movs	r2, #1
 8001090:	611a      	str	r2, [r3, #16]
  PORT3->IOCR0 = 0x98;              // Output-Port PWM Signal festlegen: Alt3 =>OUT bei P3.0
 8001092:	4b06      	ldr	r3, [pc, #24]	; (80010ac <init_pwm+0x50>)
 8001094:	2298      	movs	r2, #152	; 0x98
 8001096:	611a      	str	r2, [r3, #16]
  CCU42_CC40->TCSET = 0x01;         // Zähler starten
 8001098:	4b03      	ldr	r3, [pc, #12]	; (80010a8 <init_pwm+0x4c>)
 800109a:	2201      	movs	r2, #1
 800109c:	60da      	str	r2, [r3, #12]
}
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40014000 	.word	0x40014000
 80010a8:	40014100 	.word	0x40014100
 80010ac:	48028300 	.word	0x48028300

080010b0 <init_timer>:

void init_timer(void) {
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /*
    *   Timer init
    *   CCU40-Timermodul
    */
  CCU40->GIDLC = 0x10F;             // Vorteiler enable, IDLE CCU40 disable
 80010b4:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <init_timer+0x30>)
 80010b6:	f240 120f 	movw	r2, #271	; 0x10f
 80010ba:	60da      	str	r2, [r3, #12]
  CCU40_CC40->TC = 0x04;            // Shadow transfer enable on clear
 80010bc:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <init_timer+0x34>)
 80010be:	2204      	movs	r2, #4
 80010c0:	615a      	str	r2, [r3, #20]
  CCU40_CC40->PSC = 0b0110;         // Vorteiler festlegen
 80010c2:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <init_timer+0x34>)
 80010c4:	2206      	movs	r2, #6
 80010c6:	625a      	str	r2, [r3, #36]	; 0x24
  CCU40_CC40->PRS = 33752;          // Perioden Wert festlegen
 80010c8:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <init_timer+0x34>)
 80010ca:	f248 32d8 	movw	r2, #33752	; 0x83d8
 80010ce:	635a      	str	r2, [r3, #52]	; 0x34
  CCU40->GCSS = 1;                  // Shadow transfer request
 80010d0:	4b03      	ldr	r3, [pc, #12]	; (80010e0 <init_timer+0x30>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	611a      	str	r2, [r3, #16]
}
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	4000c000 	.word	0x4000c000
 80010e4:	4000c100 	.word	0x4000c100

080010e8 <__aeabi_drsub>:
 80010e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80010ec:	e002      	b.n	80010f4 <__adddf3>
 80010ee:	bf00      	nop

080010f0 <__aeabi_dsub>:
 80010f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080010f4 <__adddf3>:
 80010f4:	b530      	push	{r4, r5, lr}
 80010f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80010fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80010fe:	ea94 0f05 	teq	r4, r5
 8001102:	bf08      	it	eq
 8001104:	ea90 0f02 	teqeq	r0, r2
 8001108:	bf1f      	itttt	ne
 800110a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800110e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8001112:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8001116:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800111a:	f000 80e2 	beq.w	80012e2 <__adddf3+0x1ee>
 800111e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8001122:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8001126:	bfb8      	it	lt
 8001128:	426d      	neglt	r5, r5
 800112a:	dd0c      	ble.n	8001146 <__adddf3+0x52>
 800112c:	442c      	add	r4, r5
 800112e:	ea80 0202 	eor.w	r2, r0, r2
 8001132:	ea81 0303 	eor.w	r3, r1, r3
 8001136:	ea82 0000 	eor.w	r0, r2, r0
 800113a:	ea83 0101 	eor.w	r1, r3, r1
 800113e:	ea80 0202 	eor.w	r2, r0, r2
 8001142:	ea81 0303 	eor.w	r3, r1, r3
 8001146:	2d36      	cmp	r5, #54	; 0x36
 8001148:	bf88      	it	hi
 800114a:	bd30      	pophi	{r4, r5, pc}
 800114c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8001150:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8001154:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8001158:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800115c:	d002      	beq.n	8001164 <__adddf3+0x70>
 800115e:	4240      	negs	r0, r0
 8001160:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001164:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8001168:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800116c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8001170:	d002      	beq.n	8001178 <__adddf3+0x84>
 8001172:	4252      	negs	r2, r2
 8001174:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001178:	ea94 0f05 	teq	r4, r5
 800117c:	f000 80a7 	beq.w	80012ce <__adddf3+0x1da>
 8001180:	f1a4 0401 	sub.w	r4, r4, #1
 8001184:	f1d5 0e20 	rsbs	lr, r5, #32
 8001188:	db0d      	blt.n	80011a6 <__adddf3+0xb2>
 800118a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800118e:	fa22 f205 	lsr.w	r2, r2, r5
 8001192:	1880      	adds	r0, r0, r2
 8001194:	f141 0100 	adc.w	r1, r1, #0
 8001198:	fa03 f20e 	lsl.w	r2, r3, lr
 800119c:	1880      	adds	r0, r0, r2
 800119e:	fa43 f305 	asr.w	r3, r3, r5
 80011a2:	4159      	adcs	r1, r3
 80011a4:	e00e      	b.n	80011c4 <__adddf3+0xd0>
 80011a6:	f1a5 0520 	sub.w	r5, r5, #32
 80011aa:	f10e 0e20 	add.w	lr, lr, #32
 80011ae:	2a01      	cmp	r2, #1
 80011b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80011b4:	bf28      	it	cs
 80011b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80011ba:	fa43 f305 	asr.w	r3, r3, r5
 80011be:	18c0      	adds	r0, r0, r3
 80011c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80011c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80011c8:	d507      	bpl.n	80011da <__adddf3+0xe6>
 80011ca:	f04f 0e00 	mov.w	lr, #0
 80011ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80011d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80011d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80011da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80011de:	d31b      	bcc.n	8001218 <__adddf3+0x124>
 80011e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80011e4:	d30c      	bcc.n	8001200 <__adddf3+0x10c>
 80011e6:	0849      	lsrs	r1, r1, #1
 80011e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80011ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80011f0:	f104 0401 	add.w	r4, r4, #1
 80011f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80011f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80011fc:	f080 809a 	bcs.w	8001334 <__adddf3+0x240>
 8001200:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8001204:	bf08      	it	eq
 8001206:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800120a:	f150 0000 	adcs.w	r0, r0, #0
 800120e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8001212:	ea41 0105 	orr.w	r1, r1, r5
 8001216:	bd30      	pop	{r4, r5, pc}
 8001218:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800121c:	4140      	adcs	r0, r0
 800121e:	eb41 0101 	adc.w	r1, r1, r1
 8001222:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8001226:	f1a4 0401 	sub.w	r4, r4, #1
 800122a:	d1e9      	bne.n	8001200 <__adddf3+0x10c>
 800122c:	f091 0f00 	teq	r1, #0
 8001230:	bf04      	itt	eq
 8001232:	4601      	moveq	r1, r0
 8001234:	2000      	moveq	r0, #0
 8001236:	fab1 f381 	clz	r3, r1
 800123a:	bf08      	it	eq
 800123c:	3320      	addeq	r3, #32
 800123e:	f1a3 030b 	sub.w	r3, r3, #11
 8001242:	f1b3 0220 	subs.w	r2, r3, #32
 8001246:	da0c      	bge.n	8001262 <__adddf3+0x16e>
 8001248:	320c      	adds	r2, #12
 800124a:	dd08      	ble.n	800125e <__adddf3+0x16a>
 800124c:	f102 0c14 	add.w	ip, r2, #20
 8001250:	f1c2 020c 	rsb	r2, r2, #12
 8001254:	fa01 f00c 	lsl.w	r0, r1, ip
 8001258:	fa21 f102 	lsr.w	r1, r1, r2
 800125c:	e00c      	b.n	8001278 <__adddf3+0x184>
 800125e:	f102 0214 	add.w	r2, r2, #20
 8001262:	bfd8      	it	le
 8001264:	f1c2 0c20 	rsble	ip, r2, #32
 8001268:	fa01 f102 	lsl.w	r1, r1, r2
 800126c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8001270:	bfdc      	itt	le
 8001272:	ea41 010c 	orrle.w	r1, r1, ip
 8001276:	4090      	lslle	r0, r2
 8001278:	1ae4      	subs	r4, r4, r3
 800127a:	bfa2      	ittt	ge
 800127c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8001280:	4329      	orrge	r1, r5
 8001282:	bd30      	popge	{r4, r5, pc}
 8001284:	ea6f 0404 	mvn.w	r4, r4
 8001288:	3c1f      	subs	r4, #31
 800128a:	da1c      	bge.n	80012c6 <__adddf3+0x1d2>
 800128c:	340c      	adds	r4, #12
 800128e:	dc0e      	bgt.n	80012ae <__adddf3+0x1ba>
 8001290:	f104 0414 	add.w	r4, r4, #20
 8001294:	f1c4 0220 	rsb	r2, r4, #32
 8001298:	fa20 f004 	lsr.w	r0, r0, r4
 800129c:	fa01 f302 	lsl.w	r3, r1, r2
 80012a0:	ea40 0003 	orr.w	r0, r0, r3
 80012a4:	fa21 f304 	lsr.w	r3, r1, r4
 80012a8:	ea45 0103 	orr.w	r1, r5, r3
 80012ac:	bd30      	pop	{r4, r5, pc}
 80012ae:	f1c4 040c 	rsb	r4, r4, #12
 80012b2:	f1c4 0220 	rsb	r2, r4, #32
 80012b6:	fa20 f002 	lsr.w	r0, r0, r2
 80012ba:	fa01 f304 	lsl.w	r3, r1, r4
 80012be:	ea40 0003 	orr.w	r0, r0, r3
 80012c2:	4629      	mov	r1, r5
 80012c4:	bd30      	pop	{r4, r5, pc}
 80012c6:	fa21 f004 	lsr.w	r0, r1, r4
 80012ca:	4629      	mov	r1, r5
 80012cc:	bd30      	pop	{r4, r5, pc}
 80012ce:	f094 0f00 	teq	r4, #0
 80012d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80012d6:	bf06      	itte	eq
 80012d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80012dc:	3401      	addeq	r4, #1
 80012de:	3d01      	subne	r5, #1
 80012e0:	e74e      	b.n	8001180 <__adddf3+0x8c>
 80012e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80012e6:	bf18      	it	ne
 80012e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80012ec:	d029      	beq.n	8001342 <__adddf3+0x24e>
 80012ee:	ea94 0f05 	teq	r4, r5
 80012f2:	bf08      	it	eq
 80012f4:	ea90 0f02 	teqeq	r0, r2
 80012f8:	d005      	beq.n	8001306 <__adddf3+0x212>
 80012fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80012fe:	bf04      	itt	eq
 8001300:	4619      	moveq	r1, r3
 8001302:	4610      	moveq	r0, r2
 8001304:	bd30      	pop	{r4, r5, pc}
 8001306:	ea91 0f03 	teq	r1, r3
 800130a:	bf1e      	ittt	ne
 800130c:	2100      	movne	r1, #0
 800130e:	2000      	movne	r0, #0
 8001310:	bd30      	popne	{r4, r5, pc}
 8001312:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8001316:	d105      	bne.n	8001324 <__adddf3+0x230>
 8001318:	0040      	lsls	r0, r0, #1
 800131a:	4149      	adcs	r1, r1
 800131c:	bf28      	it	cs
 800131e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8001322:	bd30      	pop	{r4, r5, pc}
 8001324:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8001328:	bf3c      	itt	cc
 800132a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800132e:	bd30      	popcc	{r4, r5, pc}
 8001330:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8001334:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8001338:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800133c:	f04f 0000 	mov.w	r0, #0
 8001340:	bd30      	pop	{r4, r5, pc}
 8001342:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8001346:	bf1a      	itte	ne
 8001348:	4619      	movne	r1, r3
 800134a:	4610      	movne	r0, r2
 800134c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8001350:	bf1c      	itt	ne
 8001352:	460b      	movne	r3, r1
 8001354:	4602      	movne	r2, r0
 8001356:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800135a:	bf06      	itte	eq
 800135c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8001360:	ea91 0f03 	teqeq	r1, r3
 8001364:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8001368:	bd30      	pop	{r4, r5, pc}
 800136a:	bf00      	nop

0800136c <__aeabi_ui2d>:
 800136c:	f090 0f00 	teq	r0, #0
 8001370:	bf04      	itt	eq
 8001372:	2100      	moveq	r1, #0
 8001374:	4770      	bxeq	lr
 8001376:	b530      	push	{r4, r5, lr}
 8001378:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800137c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8001380:	f04f 0500 	mov.w	r5, #0
 8001384:	f04f 0100 	mov.w	r1, #0
 8001388:	e750      	b.n	800122c <__adddf3+0x138>
 800138a:	bf00      	nop

0800138c <__aeabi_i2d>:
 800138c:	f090 0f00 	teq	r0, #0
 8001390:	bf04      	itt	eq
 8001392:	2100      	moveq	r1, #0
 8001394:	4770      	bxeq	lr
 8001396:	b530      	push	{r4, r5, lr}
 8001398:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800139c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80013a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80013a4:	bf48      	it	mi
 80013a6:	4240      	negmi	r0, r0
 80013a8:	f04f 0100 	mov.w	r1, #0
 80013ac:	e73e      	b.n	800122c <__adddf3+0x138>
 80013ae:	bf00      	nop

080013b0 <__aeabi_f2d>:
 80013b0:	0042      	lsls	r2, r0, #1
 80013b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80013b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80013ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80013be:	bf1f      	itttt	ne
 80013c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80013c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80013c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80013cc:	4770      	bxne	lr
 80013ce:	f092 0f00 	teq	r2, #0
 80013d2:	bf14      	ite	ne
 80013d4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80013d8:	4770      	bxeq	lr
 80013da:	b530      	push	{r4, r5, lr}
 80013dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80013e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80013e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80013e8:	e720      	b.n	800122c <__adddf3+0x138>
 80013ea:	bf00      	nop

080013ec <__aeabi_ul2d>:
 80013ec:	ea50 0201 	orrs.w	r2, r0, r1
 80013f0:	bf08      	it	eq
 80013f2:	4770      	bxeq	lr
 80013f4:	b530      	push	{r4, r5, lr}
 80013f6:	f04f 0500 	mov.w	r5, #0
 80013fa:	e00a      	b.n	8001412 <__aeabi_l2d+0x16>

080013fc <__aeabi_l2d>:
 80013fc:	ea50 0201 	orrs.w	r2, r0, r1
 8001400:	bf08      	it	eq
 8001402:	4770      	bxeq	lr
 8001404:	b530      	push	{r4, r5, lr}
 8001406:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800140a:	d502      	bpl.n	8001412 <__aeabi_l2d+0x16>
 800140c:	4240      	negs	r0, r0
 800140e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001412:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8001416:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800141a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800141e:	f43f aedc 	beq.w	80011da <__adddf3+0xe6>
 8001422:	f04f 0203 	mov.w	r2, #3
 8001426:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800142a:	bf18      	it	ne
 800142c:	3203      	addne	r2, #3
 800142e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8001432:	bf18      	it	ne
 8001434:	3203      	addne	r2, #3
 8001436:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800143a:	f1c2 0320 	rsb	r3, r2, #32
 800143e:	fa00 fc03 	lsl.w	ip, r0, r3
 8001442:	fa20 f002 	lsr.w	r0, r0, r2
 8001446:	fa01 fe03 	lsl.w	lr, r1, r3
 800144a:	ea40 000e 	orr.w	r0, r0, lr
 800144e:	fa21 f102 	lsr.w	r1, r1, r2
 8001452:	4414      	add	r4, r2
 8001454:	e6c1      	b.n	80011da <__adddf3+0xe6>
 8001456:	bf00      	nop

08001458 <__aeabi_dmul>:
 8001458:	b570      	push	{r4, r5, r6, lr}
 800145a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800145e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8001462:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8001466:	bf1d      	ittte	ne
 8001468:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800146c:	ea94 0f0c 	teqne	r4, ip
 8001470:	ea95 0f0c 	teqne	r5, ip
 8001474:	f000 f8de 	bleq	8001634 <__aeabi_dmul+0x1dc>
 8001478:	442c      	add	r4, r5
 800147a:	ea81 0603 	eor.w	r6, r1, r3
 800147e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8001482:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8001486:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800148a:	bf18      	it	ne
 800148c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8001490:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8001494:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001498:	d038      	beq.n	800150c <__aeabi_dmul+0xb4>
 800149a:	fba0 ce02 	umull	ip, lr, r0, r2
 800149e:	f04f 0500 	mov.w	r5, #0
 80014a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80014a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80014aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80014ae:	f04f 0600 	mov.w	r6, #0
 80014b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80014b6:	f09c 0f00 	teq	ip, #0
 80014ba:	bf18      	it	ne
 80014bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80014c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80014c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80014c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80014cc:	d204      	bcs.n	80014d8 <__aeabi_dmul+0x80>
 80014ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80014d2:	416d      	adcs	r5, r5
 80014d4:	eb46 0606 	adc.w	r6, r6, r6
 80014d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80014dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80014e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80014e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80014e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80014ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80014f0:	bf88      	it	hi
 80014f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80014f6:	d81e      	bhi.n	8001536 <__aeabi_dmul+0xde>
 80014f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80014fc:	bf08      	it	eq
 80014fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8001502:	f150 0000 	adcs.w	r0, r0, #0
 8001506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800150a:	bd70      	pop	{r4, r5, r6, pc}
 800150c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8001510:	ea46 0101 	orr.w	r1, r6, r1
 8001514:	ea40 0002 	orr.w	r0, r0, r2
 8001518:	ea81 0103 	eor.w	r1, r1, r3
 800151c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8001520:	bfc2      	ittt	gt
 8001522:	ebd4 050c 	rsbsgt	r5, r4, ip
 8001526:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800152a:	bd70      	popgt	{r4, r5, r6, pc}
 800152c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8001530:	f04f 0e00 	mov.w	lr, #0
 8001534:	3c01      	subs	r4, #1
 8001536:	f300 80ab 	bgt.w	8001690 <__aeabi_dmul+0x238>
 800153a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800153e:	bfde      	ittt	le
 8001540:	2000      	movle	r0, #0
 8001542:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8001546:	bd70      	pople	{r4, r5, r6, pc}
 8001548:	f1c4 0400 	rsb	r4, r4, #0
 800154c:	3c20      	subs	r4, #32
 800154e:	da35      	bge.n	80015bc <__aeabi_dmul+0x164>
 8001550:	340c      	adds	r4, #12
 8001552:	dc1b      	bgt.n	800158c <__aeabi_dmul+0x134>
 8001554:	f104 0414 	add.w	r4, r4, #20
 8001558:	f1c4 0520 	rsb	r5, r4, #32
 800155c:	fa00 f305 	lsl.w	r3, r0, r5
 8001560:	fa20 f004 	lsr.w	r0, r0, r4
 8001564:	fa01 f205 	lsl.w	r2, r1, r5
 8001568:	ea40 0002 	orr.w	r0, r0, r2
 800156c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8001570:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8001574:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8001578:	fa21 f604 	lsr.w	r6, r1, r4
 800157c:	eb42 0106 	adc.w	r1, r2, r6
 8001580:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8001584:	bf08      	it	eq
 8001586:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800158a:	bd70      	pop	{r4, r5, r6, pc}
 800158c:	f1c4 040c 	rsb	r4, r4, #12
 8001590:	f1c4 0520 	rsb	r5, r4, #32
 8001594:	fa00 f304 	lsl.w	r3, r0, r4
 8001598:	fa20 f005 	lsr.w	r0, r0, r5
 800159c:	fa01 f204 	lsl.w	r2, r1, r4
 80015a0:	ea40 0002 	orr.w	r0, r0, r2
 80015a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80015a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80015ac:	f141 0100 	adc.w	r1, r1, #0
 80015b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80015b4:	bf08      	it	eq
 80015b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80015ba:	bd70      	pop	{r4, r5, r6, pc}
 80015bc:	f1c4 0520 	rsb	r5, r4, #32
 80015c0:	fa00 f205 	lsl.w	r2, r0, r5
 80015c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80015c8:	fa20 f304 	lsr.w	r3, r0, r4
 80015cc:	fa01 f205 	lsl.w	r2, r1, r5
 80015d0:	ea43 0302 	orr.w	r3, r3, r2
 80015d4:	fa21 f004 	lsr.w	r0, r1, r4
 80015d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80015dc:	fa21 f204 	lsr.w	r2, r1, r4
 80015e0:	ea20 0002 	bic.w	r0, r0, r2
 80015e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80015e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80015ec:	bf08      	it	eq
 80015ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80015f2:	bd70      	pop	{r4, r5, r6, pc}
 80015f4:	f094 0f00 	teq	r4, #0
 80015f8:	d10f      	bne.n	800161a <__aeabi_dmul+0x1c2>
 80015fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80015fe:	0040      	lsls	r0, r0, #1
 8001600:	eb41 0101 	adc.w	r1, r1, r1
 8001604:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8001608:	bf08      	it	eq
 800160a:	3c01      	subeq	r4, #1
 800160c:	d0f7      	beq.n	80015fe <__aeabi_dmul+0x1a6>
 800160e:	ea41 0106 	orr.w	r1, r1, r6
 8001612:	f095 0f00 	teq	r5, #0
 8001616:	bf18      	it	ne
 8001618:	4770      	bxne	lr
 800161a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800161e:	0052      	lsls	r2, r2, #1
 8001620:	eb43 0303 	adc.w	r3, r3, r3
 8001624:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001628:	bf08      	it	eq
 800162a:	3d01      	subeq	r5, #1
 800162c:	d0f7      	beq.n	800161e <__aeabi_dmul+0x1c6>
 800162e:	ea43 0306 	orr.w	r3, r3, r6
 8001632:	4770      	bx	lr
 8001634:	ea94 0f0c 	teq	r4, ip
 8001638:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800163c:	bf18      	it	ne
 800163e:	ea95 0f0c 	teqne	r5, ip
 8001642:	d00c      	beq.n	800165e <__aeabi_dmul+0x206>
 8001644:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8001648:	bf18      	it	ne
 800164a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800164e:	d1d1      	bne.n	80015f4 <__aeabi_dmul+0x19c>
 8001650:	ea81 0103 	eor.w	r1, r1, r3
 8001654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8001658:	f04f 0000 	mov.w	r0, #0
 800165c:	bd70      	pop	{r4, r5, r6, pc}
 800165e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8001662:	bf06      	itte	eq
 8001664:	4610      	moveq	r0, r2
 8001666:	4619      	moveq	r1, r3
 8001668:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800166c:	d019      	beq.n	80016a2 <__aeabi_dmul+0x24a>
 800166e:	ea94 0f0c 	teq	r4, ip
 8001672:	d102      	bne.n	800167a <__aeabi_dmul+0x222>
 8001674:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8001678:	d113      	bne.n	80016a2 <__aeabi_dmul+0x24a>
 800167a:	ea95 0f0c 	teq	r5, ip
 800167e:	d105      	bne.n	800168c <__aeabi_dmul+0x234>
 8001680:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8001684:	bf1c      	itt	ne
 8001686:	4610      	movne	r0, r2
 8001688:	4619      	movne	r1, r3
 800168a:	d10a      	bne.n	80016a2 <__aeabi_dmul+0x24a>
 800168c:	ea81 0103 	eor.w	r1, r1, r3
 8001690:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8001694:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8001698:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800169c:	f04f 0000 	mov.w	r0, #0
 80016a0:	bd70      	pop	{r4, r5, r6, pc}
 80016a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80016a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80016aa:	bd70      	pop	{r4, r5, r6, pc}

080016ac <__aeabi_ddiv>:
 80016ac:	b570      	push	{r4, r5, r6, lr}
 80016ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80016b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80016b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80016ba:	bf1d      	ittte	ne
 80016bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80016c0:	ea94 0f0c 	teqne	r4, ip
 80016c4:	ea95 0f0c 	teqne	r5, ip
 80016c8:	f000 f8a7 	bleq	800181a <__aeabi_ddiv+0x16e>
 80016cc:	eba4 0405 	sub.w	r4, r4, r5
 80016d0:	ea81 0e03 	eor.w	lr, r1, r3
 80016d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80016d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80016dc:	f000 8088 	beq.w	80017f0 <__aeabi_ddiv+0x144>
 80016e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80016e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80016e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80016ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80016f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80016f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80016f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80016fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8001700:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8001704:	429d      	cmp	r5, r3
 8001706:	bf08      	it	eq
 8001708:	4296      	cmpeq	r6, r2
 800170a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800170e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8001712:	d202      	bcs.n	800171a <__aeabi_ddiv+0x6e>
 8001714:	085b      	lsrs	r3, r3, #1
 8001716:	ea4f 0232 	mov.w	r2, r2, rrx
 800171a:	1ab6      	subs	r6, r6, r2
 800171c:	eb65 0503 	sbc.w	r5, r5, r3
 8001720:	085b      	lsrs	r3, r3, #1
 8001722:	ea4f 0232 	mov.w	r2, r2, rrx
 8001726:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800172a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800172e:	ebb6 0e02 	subs.w	lr, r6, r2
 8001732:	eb75 0e03 	sbcs.w	lr, r5, r3
 8001736:	bf22      	ittt	cs
 8001738:	1ab6      	subcs	r6, r6, r2
 800173a:	4675      	movcs	r5, lr
 800173c:	ea40 000c 	orrcs.w	r0, r0, ip
 8001740:	085b      	lsrs	r3, r3, #1
 8001742:	ea4f 0232 	mov.w	r2, r2, rrx
 8001746:	ebb6 0e02 	subs.w	lr, r6, r2
 800174a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800174e:	bf22      	ittt	cs
 8001750:	1ab6      	subcs	r6, r6, r2
 8001752:	4675      	movcs	r5, lr
 8001754:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001758:	085b      	lsrs	r3, r3, #1
 800175a:	ea4f 0232 	mov.w	r2, r2, rrx
 800175e:	ebb6 0e02 	subs.w	lr, r6, r2
 8001762:	eb75 0e03 	sbcs.w	lr, r5, r3
 8001766:	bf22      	ittt	cs
 8001768:	1ab6      	subcs	r6, r6, r2
 800176a:	4675      	movcs	r5, lr
 800176c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001770:	085b      	lsrs	r3, r3, #1
 8001772:	ea4f 0232 	mov.w	r2, r2, rrx
 8001776:	ebb6 0e02 	subs.w	lr, r6, r2
 800177a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800177e:	bf22      	ittt	cs
 8001780:	1ab6      	subcs	r6, r6, r2
 8001782:	4675      	movcs	r5, lr
 8001784:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001788:	ea55 0e06 	orrs.w	lr, r5, r6
 800178c:	d018      	beq.n	80017c0 <__aeabi_ddiv+0x114>
 800178e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8001792:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8001796:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800179a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800179e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80017a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80017a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80017aa:	d1c0      	bne.n	800172e <__aeabi_ddiv+0x82>
 80017ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80017b0:	d10b      	bne.n	80017ca <__aeabi_ddiv+0x11e>
 80017b2:	ea41 0100 	orr.w	r1, r1, r0
 80017b6:	f04f 0000 	mov.w	r0, #0
 80017ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80017be:	e7b6      	b.n	800172e <__aeabi_ddiv+0x82>
 80017c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80017c4:	bf04      	itt	eq
 80017c6:	4301      	orreq	r1, r0
 80017c8:	2000      	moveq	r0, #0
 80017ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80017ce:	bf88      	it	hi
 80017d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80017d4:	f63f aeaf 	bhi.w	8001536 <__aeabi_dmul+0xde>
 80017d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80017dc:	bf04      	itt	eq
 80017de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80017e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80017e6:	f150 0000 	adcs.w	r0, r0, #0
 80017ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80017ee:	bd70      	pop	{r4, r5, r6, pc}
 80017f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80017f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80017f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80017fc:	bfc2      	ittt	gt
 80017fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8001802:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8001806:	bd70      	popgt	{r4, r5, r6, pc}
 8001808:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800180c:	f04f 0e00 	mov.w	lr, #0
 8001810:	3c01      	subs	r4, #1
 8001812:	e690      	b.n	8001536 <__aeabi_dmul+0xde>
 8001814:	ea45 0e06 	orr.w	lr, r5, r6
 8001818:	e68d      	b.n	8001536 <__aeabi_dmul+0xde>
 800181a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800181e:	ea94 0f0c 	teq	r4, ip
 8001822:	bf08      	it	eq
 8001824:	ea95 0f0c 	teqeq	r5, ip
 8001828:	f43f af3b 	beq.w	80016a2 <__aeabi_dmul+0x24a>
 800182c:	ea94 0f0c 	teq	r4, ip
 8001830:	d10a      	bne.n	8001848 <__aeabi_ddiv+0x19c>
 8001832:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8001836:	f47f af34 	bne.w	80016a2 <__aeabi_dmul+0x24a>
 800183a:	ea95 0f0c 	teq	r5, ip
 800183e:	f47f af25 	bne.w	800168c <__aeabi_dmul+0x234>
 8001842:	4610      	mov	r0, r2
 8001844:	4619      	mov	r1, r3
 8001846:	e72c      	b.n	80016a2 <__aeabi_dmul+0x24a>
 8001848:	ea95 0f0c 	teq	r5, ip
 800184c:	d106      	bne.n	800185c <__aeabi_ddiv+0x1b0>
 800184e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8001852:	f43f aefd 	beq.w	8001650 <__aeabi_dmul+0x1f8>
 8001856:	4610      	mov	r0, r2
 8001858:	4619      	mov	r1, r3
 800185a:	e722      	b.n	80016a2 <__aeabi_dmul+0x24a>
 800185c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8001860:	bf18      	it	ne
 8001862:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8001866:	f47f aec5 	bne.w	80015f4 <__aeabi_dmul+0x19c>
 800186a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800186e:	f47f af0d 	bne.w	800168c <__aeabi_dmul+0x234>
 8001872:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8001876:	f47f aeeb 	bne.w	8001650 <__aeabi_dmul+0x1f8>
 800187a:	e712      	b.n	80016a2 <__aeabi_dmul+0x24a>

0800187c <__aeabi_d2uiz>:
 800187c:	004a      	lsls	r2, r1, #1
 800187e:	d211      	bcs.n	80018a4 <__aeabi_d2uiz+0x28>
 8001880:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8001884:	d211      	bcs.n	80018aa <__aeabi_d2uiz+0x2e>
 8001886:	d50d      	bpl.n	80018a4 <__aeabi_d2uiz+0x28>
 8001888:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800188c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8001890:	d40e      	bmi.n	80018b0 <__aeabi_d2uiz+0x34>
 8001892:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8001896:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800189a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800189e:	fa23 f002 	lsr.w	r0, r3, r2
 80018a2:	4770      	bx	lr
 80018a4:	f04f 0000 	mov.w	r0, #0
 80018a8:	4770      	bx	lr
 80018aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80018ae:	d102      	bne.n	80018b6 <__aeabi_d2uiz+0x3a>
 80018b0:	f04f 30ff 	mov.w	r0, #4294967295
 80018b4:	4770      	bx	lr
 80018b6:	f04f 0000 	mov.w	r0, #0
 80018ba:	4770      	bx	lr

080018bc <__libc_init_array>:
 80018bc:	b570      	push	{r4, r5, r6, lr}
 80018be:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <__libc_init_array+0x3c>)
 80018c0:	4c0e      	ldr	r4, [pc, #56]	; (80018fc <__libc_init_array+0x40>)
 80018c2:	1ae4      	subs	r4, r4, r3
 80018c4:	10a4      	asrs	r4, r4, #2
 80018c6:	2500      	movs	r5, #0
 80018c8:	461e      	mov	r6, r3
 80018ca:	42a5      	cmp	r5, r4
 80018cc:	d004      	beq.n	80018d8 <__libc_init_array+0x1c>
 80018ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80018d2:	4798      	blx	r3
 80018d4:	3501      	adds	r5, #1
 80018d6:	e7f8      	b.n	80018ca <__libc_init_array+0xe>
 80018d8:	f7fe ffa4 	bl	8000824 <_init>
 80018dc:	4c08      	ldr	r4, [pc, #32]	; (8001900 <__libc_init_array+0x44>)
 80018de:	4b09      	ldr	r3, [pc, #36]	; (8001904 <__libc_init_array+0x48>)
 80018e0:	1ae4      	subs	r4, r4, r3
 80018e2:	10a4      	asrs	r4, r4, #2
 80018e4:	2500      	movs	r5, #0
 80018e6:	461e      	mov	r6, r3
 80018e8:	42a5      	cmp	r5, r4
 80018ea:	d004      	beq.n	80018f6 <__libc_init_array+0x3a>
 80018ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80018f0:	4798      	blx	r3
 80018f2:	3501      	adds	r5, #1
 80018f4:	e7f8      	b.n	80018e8 <__libc_init_array+0x2c>
 80018f6:	bd70      	pop	{r4, r5, r6, pc}
 80018f8:	20000000 	.word	0x20000000
 80018fc:	20000000 	.word	0x20000000
 8001900:	20000000 	.word	0x20000000
 8001904:	20000000 	.word	0x20000000

08001908 <PIN_INTERRUPT_0>:
 8001908:	50004800 48028000 00000000 00000000     .H.P...H........
	...
 8001920:	0000013d 00003f04 00010003              =....?......
